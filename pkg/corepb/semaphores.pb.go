// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.32.0
// source: pkg/corepb/semaphores.proto

package corepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSemaphoreRequest struct {
	state                             protoimpl.MessageState  `protogen:"open.v1"`
	NamespaceTimestampedId            *NamespaceTimestampedId `protobuf:"bytes,1,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	Name                              string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description                       string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Now                               int64                   `protobuf:"varint,4,opt,name=now,proto3" json:"now,omitempty"`
	Permits                           uint64                  `protobuf:"varint,5,opt,name=permits,proto3" json:"permits,omitempty"`
	MaxNumberOfSemaphoresPerNamespace int64                   `protobuf:"varint,6,opt,name=max_number_of_semaphores_per_namespace,json=maxNumberOfSemaphoresPerNamespace,proto3" json:"max_number_of_semaphores_per_namespace,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *CreateSemaphoreRequest) Reset() {
	*x = CreateSemaphoreRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSemaphoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSemaphoreRequest) ProtoMessage() {}

func (x *CreateSemaphoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSemaphoreRequest.ProtoReflect.Descriptor instead.
func (*CreateSemaphoreRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSemaphoreRequest) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

func (x *CreateSemaphoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSemaphoreRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSemaphoreRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *CreateSemaphoreRequest) GetPermits() uint64 {
	if x != nil {
		return x.Permits
	}
	return 0
}

func (x *CreateSemaphoreRequest) GetMaxNumberOfSemaphoresPerNamespace() int64 {
	if x != nil {
		return x.MaxNumberOfSemaphoresPerNamespace
	}
	return 0
}

type CreateSemaphoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Semaphore     *Semaphore             `protobuf:"bytes,1,opt,name=semaphore,proto3" json:"semaphore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSemaphoreResponse) Reset() {
	*x = CreateSemaphoreResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSemaphoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSemaphoreResponse) ProtoMessage() {}

func (x *CreateSemaphoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSemaphoreResponse.ProtoReflect.Descriptor instead.
func (*CreateSemaphoreResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSemaphoreResponse) GetSemaphore() *Semaphore {
	if x != nil {
		return x.Semaphore
	}
	return nil
}

type ListSemaphoresRequest struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	NamespaceTimestampedId *NamespaceTimestampedId `protobuf:"bytes,1,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	PaginationToken        *PaginationToken        `protobuf:"bytes,2,opt,name=pagination_token,json=paginationToken,proto3" json:"pagination_token,omitempty"`
	Limit                  int32                   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ListSemaphoresRequest) Reset() {
	*x = ListSemaphoresRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSemaphoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSemaphoresRequest) ProtoMessage() {}

func (x *ListSemaphoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSemaphoresRequest.ProtoReflect.Descriptor instead.
func (*ListSemaphoresRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{2}
}

func (x *ListSemaphoresRequest) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

func (x *ListSemaphoresRequest) GetPaginationToken() *PaginationToken {
	if x != nil {
		return x.PaginationToken
	}
	return nil
}

func (x *ListSemaphoresRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListSemaphoresResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Semaphores              []*Semaphore           `protobuf:"bytes,1,rep,name=semaphores,proto3" json:"semaphores,omitempty"`
	NextPaginationToken     *PaginationToken       `protobuf:"bytes,2,opt,name=next_pagination_token,json=nextPaginationToken,proto3" json:"next_pagination_token,omitempty"`
	PreviousPaginationToken *PaginationToken       `protobuf:"bytes,3,opt,name=previous_pagination_token,json=previousPaginationToken,proto3" json:"previous_pagination_token,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ListSemaphoresResponse) Reset() {
	*x = ListSemaphoresResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSemaphoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSemaphoresResponse) ProtoMessage() {}

func (x *ListSemaphoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSemaphoresResponse.ProtoReflect.Descriptor instead.
func (*ListSemaphoresResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{3}
}

func (x *ListSemaphoresResponse) GetSemaphores() []*Semaphore {
	if x != nil {
		return x.Semaphores
	}
	return nil
}

func (x *ListSemaphoresResponse) GetNextPaginationToken() *PaginationToken {
	if x != nil {
		return x.NextPaginationToken
	}
	return nil
}

func (x *ListSemaphoresResponse) GetPreviousPaginationToken() *PaginationToken {
	if x != nil {
		return x.PreviousPaginationToken
	}
	return nil
}

type GetSemaphoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SemaphoreId   *SemaphoreId           `protobuf:"bytes,1,opt,name=semaphore_id,json=semaphoreId,proto3" json:"semaphore_id,omitempty"`
	Now           int64                  `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSemaphoreRequest) Reset() {
	*x = GetSemaphoreRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSemaphoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSemaphoreRequest) ProtoMessage() {}

func (x *GetSemaphoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSemaphoreRequest.ProtoReflect.Descriptor instead.
func (*GetSemaphoreRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{4}
}

func (x *GetSemaphoreRequest) GetSemaphoreId() *SemaphoreId {
	if x != nil {
		return x.SemaphoreId
	}
	return nil
}

func (x *GetSemaphoreRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type GetSemaphoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Semaphore     *Semaphore             `protobuf:"bytes,1,opt,name=semaphore,proto3" json:"semaphore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSemaphoreResponse) Reset() {
	*x = GetSemaphoreResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSemaphoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSemaphoreResponse) ProtoMessage() {}

func (x *GetSemaphoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSemaphoreResponse.ProtoReflect.Descriptor instead.
func (*GetSemaphoreResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{5}
}

func (x *GetSemaphoreResponse) GetSemaphore() *Semaphore {
	if x != nil {
		return x.Semaphore
	}
	return nil
}

type AcquireSemaphoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SemaphoreId   *SemaphoreId           `protobuf:"bytes,1,opt,name=semaphore_id,json=semaphoreId,proto3" json:"semaphore_id,omitempty"`
	ProcessId     string                 `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Now           int64                  `protobuf:"varint,4,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireSemaphoreRequest) Reset() {
	*x = AcquireSemaphoreRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireSemaphoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireSemaphoreRequest) ProtoMessage() {}

func (x *AcquireSemaphoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireSemaphoreRequest.ProtoReflect.Descriptor instead.
func (*AcquireSemaphoreRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{6}
}

func (x *AcquireSemaphoreRequest) GetSemaphoreId() *SemaphoreId {
	if x != nil {
		return x.SemaphoreId
	}
	return nil
}

func (x *AcquireSemaphoreRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *AcquireSemaphoreRequest) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *AcquireSemaphoreRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type AcquireSemaphoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Semaphore     *Semaphore             `protobuf:"bytes,1,opt,name=semaphore,proto3" json:"semaphore,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireSemaphoreResponse) Reset() {
	*x = AcquireSemaphoreResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireSemaphoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireSemaphoreResponse) ProtoMessage() {}

func (x *AcquireSemaphoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireSemaphoreResponse.ProtoReflect.Descriptor instead.
func (*AcquireSemaphoreResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{7}
}

func (x *AcquireSemaphoreResponse) GetSemaphore() *Semaphore {
	if x != nil {
		return x.Semaphore
	}
	return nil
}

func (x *AcquireSemaphoreResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReleaseSemaphoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SemaphoreId   *SemaphoreId           `protobuf:"bytes,1,opt,name=semaphore_id,json=semaphoreId,proto3" json:"semaphore_id,omitempty"`
	ProcessId     string                 `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Now           int64                  `protobuf:"varint,3,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseSemaphoreRequest) Reset() {
	*x = ReleaseSemaphoreRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseSemaphoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSemaphoreRequest) ProtoMessage() {}

func (x *ReleaseSemaphoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSemaphoreRequest.ProtoReflect.Descriptor instead.
func (*ReleaseSemaphoreRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{8}
}

func (x *ReleaseSemaphoreRequest) GetSemaphoreId() *SemaphoreId {
	if x != nil {
		return x.SemaphoreId
	}
	return nil
}

func (x *ReleaseSemaphoreRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *ReleaseSemaphoreRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type ReleaseSemaphoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Semaphore     *Semaphore             `protobuf:"bytes,1,opt,name=semaphore,proto3" json:"semaphore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseSemaphoreResponse) Reset() {
	*x = ReleaseSemaphoreResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseSemaphoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSemaphoreResponse) ProtoMessage() {}

func (x *ReleaseSemaphoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSemaphoreResponse.ProtoReflect.Descriptor instead.
func (*ReleaseSemaphoreResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{9}
}

func (x *ReleaseSemaphoreResponse) GetSemaphore() *Semaphore {
	if x != nil {
		return x.Semaphore
	}
	return nil
}

type UpdateSemaphoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SemaphoreId   *SemaphoreId           `protobuf:"bytes,1,opt,name=semaphore_id,json=semaphoreId,proto3" json:"semaphore_id,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Permits       uint64                 `protobuf:"varint,3,opt,name=permits,proto3" json:"permits,omitempty"`
	Now           int64                  `protobuf:"varint,4,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSemaphoreRequest) Reset() {
	*x = UpdateSemaphoreRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSemaphoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSemaphoreRequest) ProtoMessage() {}

func (x *UpdateSemaphoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSemaphoreRequest.ProtoReflect.Descriptor instead.
func (*UpdateSemaphoreRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateSemaphoreRequest) GetSemaphoreId() *SemaphoreId {
	if x != nil {
		return x.SemaphoreId
	}
	return nil
}

func (x *UpdateSemaphoreRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSemaphoreRequest) GetPermits() uint64 {
	if x != nil {
		return x.Permits
	}
	return 0
}

func (x *UpdateSemaphoreRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type UpdateSemaphoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Semaphore     *Semaphore             `protobuf:"bytes,1,opt,name=semaphore,proto3" json:"semaphore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSemaphoreResponse) Reset() {
	*x = UpdateSemaphoreResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSemaphoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSemaphoreResponse) ProtoMessage() {}

func (x *UpdateSemaphoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSemaphoreResponse.ProtoReflect.Descriptor instead.
func (*UpdateSemaphoreResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSemaphoreResponse) GetSemaphore() *Semaphore {
	if x != nil {
		return x.Semaphore
	}
	return nil
}

type DeleteSemaphoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SemaphoreId   *SemaphoreId           `protobuf:"bytes,1,opt,name=semaphore_id,json=semaphoreId,proto3" json:"semaphore_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSemaphoreRequest) Reset() {
	*x = DeleteSemaphoreRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSemaphoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSemaphoreRequest) ProtoMessage() {}

func (x *DeleteSemaphoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSemaphoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteSemaphoreRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteSemaphoreRequest) GetSemaphoreId() *SemaphoreId {
	if x != nil {
		return x.SemaphoreId
	}
	return nil
}

type DeleteSemaphoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSemaphoreResponse) Reset() {
	*x = DeleteSemaphoreResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSemaphoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSemaphoreResponse) ProtoMessage() {}

func (x *DeleteSemaphoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSemaphoreResponse.ProtoReflect.Descriptor instead.
func (*DeleteSemaphoreResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{13}
}

type SemaphoresDeleteNamespaceRequest struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	RecordId               uint64                  `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	NamespaceTimestampedId *NamespaceTimestampedId `protobuf:"bytes,2,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	Now                    int64                   `protobuf:"varint,3,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SemaphoresDeleteNamespaceRequest) Reset() {
	*x = SemaphoresDeleteNamespaceRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoresDeleteNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoresDeleteNamespaceRequest) ProtoMessage() {}

func (x *SemaphoresDeleteNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoresDeleteNamespaceRequest.ProtoReflect.Descriptor instead.
func (*SemaphoresDeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{14}
}

func (x *SemaphoresDeleteNamespaceRequest) GetRecordId() uint64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *SemaphoresDeleteNamespaceRequest) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

func (x *SemaphoresDeleteNamespaceRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type SemaphoresDeleteNamespaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemaphoresDeleteNamespaceResponse) Reset() {
	*x = SemaphoresDeleteNamespaceResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoresDeleteNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoresDeleteNamespaceResponse) ProtoMessage() {}

func (x *SemaphoresDeleteNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoresDeleteNamespaceResponse.ProtoReflect.Descriptor instead.
func (*SemaphoresDeleteNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{15}
}

type Semaphore struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               *SemaphoreId           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description      string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt        int64                  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                  `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Permits          uint64                 `protobuf:"varint,5,opt,name=permits,proto3" json:"permits,omitempty"`
	SemaphoreHolders []*SemaphoreHolder     `protobuf:"bytes,6,rep,name=semaphore_holders,json=semaphoreHolders,proto3" json:"semaphore_holders,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Semaphore) Reset() {
	*x = Semaphore{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Semaphore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Semaphore) ProtoMessage() {}

func (x *Semaphore) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Semaphore.ProtoReflect.Descriptor instead.
func (*Semaphore) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{16}
}

func (x *Semaphore) GetId() *SemaphoreId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Semaphore) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Semaphore) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Semaphore) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Semaphore) GetPermits() uint64 {
	if x != nil {
		return x.Permits
	}
	return 0
}

func (x *Semaphore) GetSemaphoreHolders() []*SemaphoreHolder {
	if x != nil {
		return x.SemaphoreHolders
	}
	return nil
}

type SemaphoreHolder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProcessId     string                 `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	LockedAt      int64                  `protobuf:"varint,2,opt,name=locked_at,json=lockedAt,proto3" json:"locked_at,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemaphoreHolder) Reset() {
	*x = SemaphoreHolder{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoreHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreHolder) ProtoMessage() {}

func (x *SemaphoreHolder) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreHolder.ProtoReflect.Descriptor instead.
func (*SemaphoreHolder) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{17}
}

func (x *SemaphoreHolder) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *SemaphoreHolder) GetLockedAt() int64 {
	if x != nil {
		return x.LockedAt
	}
	return 0
}

func (x *SemaphoreHolder) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type SemaphoreId struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AccountId          uint64                 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	NamespaceName      string                 `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	NamespaceCreatedAt int64                  `protobuf:"varint,3,opt,name=namespace_created_at,json=namespaceCreatedAt,proto3" json:"namespace_created_at,omitempty"`
	SemaphoreName      string                 `protobuf:"bytes,4,opt,name=semaphore_name,json=semaphoreName,proto3" json:"semaphore_name,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SemaphoreId) Reset() {
	*x = SemaphoreId{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoreId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreId) ProtoMessage() {}

func (x *SemaphoreId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreId.ProtoReflect.Descriptor instead.
func (*SemaphoreId) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{18}
}

func (x *SemaphoreId) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *SemaphoreId) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *SemaphoreId) GetNamespaceCreatedAt() int64 {
	if x != nil {
		return x.NamespaceCreatedAt
	}
	return 0
}

func (x *SemaphoreId) GetSemaphoreName() string {
	if x != nil {
		return x.SemaphoreName
	}
	return ""
}

type RunSemaphoresGarbageCollectionRequest struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Now                        int64                  `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`
	GcRecordsPageSize          int64                  `protobuf:"varint,2,opt,name=gc_records_page_size,json=gcRecordsPageSize,proto3" json:"gc_records_page_size,omitempty"`
	GcRecordSemaphoresPageSize int64                  `protobuf:"varint,3,opt,name=gc_record_semaphores_page_size,json=gcRecordSemaphoresPageSize,proto3" json:"gc_record_semaphores_page_size,omitempty"`
	MaxVisitedSemaphores       int64                  `protobuf:"varint,4,opt,name=max_visited_semaphores,json=maxVisitedSemaphores,proto3" json:"max_visited_semaphores,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *RunSemaphoresGarbageCollectionRequest) Reset() {
	*x = RunSemaphoresGarbageCollectionRequest{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunSemaphoresGarbageCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSemaphoresGarbageCollectionRequest) ProtoMessage() {}

func (x *RunSemaphoresGarbageCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSemaphoresGarbageCollectionRequest.ProtoReflect.Descriptor instead.
func (*RunSemaphoresGarbageCollectionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{19}
}

func (x *RunSemaphoresGarbageCollectionRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *RunSemaphoresGarbageCollectionRequest) GetGcRecordsPageSize() int64 {
	if x != nil {
		return x.GcRecordsPageSize
	}
	return 0
}

func (x *RunSemaphoresGarbageCollectionRequest) GetGcRecordSemaphoresPageSize() int64 {
	if x != nil {
		return x.GcRecordSemaphoresPageSize
	}
	return 0
}

func (x *RunSemaphoresGarbageCollectionRequest) GetMaxVisitedSemaphores() int64 {
	if x != nil {
		return x.MaxVisitedSemaphores
	}
	return 0
}

type RunSemaphoresGarbageCollectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunSemaphoresGarbageCollectionResponse) Reset() {
	*x = RunSemaphoresGarbageCollectionResponse{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunSemaphoresGarbageCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSemaphoresGarbageCollectionResponse) ProtoMessage() {}

func (x *RunSemaphoresGarbageCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSemaphoresGarbageCollectionResponse.ProtoReflect.Descriptor instead.
func (*RunSemaphoresGarbageCollectionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{20}
}

type SemaphoresGCRecord struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	Id                     uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NamespaceTimestampedId *NamespaceTimestampedId `protobuf:"bytes,2,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SemaphoresGCRecord) Reset() {
	*x = SemaphoresGCRecord{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoresGCRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoresGCRecord) ProtoMessage() {}

func (x *SemaphoresGCRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoresGCRecord.ProtoReflect.Descriptor instead.
func (*SemaphoresGCRecord) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{21}
}

func (x *SemaphoresGCRecord) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SemaphoresGCRecord) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

type SemaphoresCounter struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	NamespaceTimestampedId *NamespaceTimestampedId `protobuf:"bytes,1,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	NumberOfSemaphores     int64                   `protobuf:"varint,2,opt,name=number_of_semaphores,json=numberOfSemaphores,proto3" json:"number_of_semaphores,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SemaphoresCounter) Reset() {
	*x = SemaphoresCounter{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoresCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoresCounter) ProtoMessage() {}

func (x *SemaphoresCounter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoresCounter.ProtoReflect.Descriptor instead.
func (*SemaphoresCounter) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{22}
}

func (x *SemaphoresCounter) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

func (x *SemaphoresCounter) GetNumberOfSemaphores() int64 {
	if x != nil {
		return x.NumberOfSemaphores
	}
	return 0
}

type SemaphoresExpirationGlobalIndexRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SemaphoreId   *SemaphoreId           `protobuf:"bytes,1,opt,name=semaphore_id,json=semaphoreId,proto3" json:"semaphore_id,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemaphoresExpirationGlobalIndexRecord) Reset() {
	*x = SemaphoresExpirationGlobalIndexRecord{}
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoresExpirationGlobalIndexRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoresExpirationGlobalIndexRecord) ProtoMessage() {}

func (x *SemaphoresExpirationGlobalIndexRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_semaphores_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoresExpirationGlobalIndexRecord.ProtoReflect.Descriptor instead.
func (*SemaphoresExpirationGlobalIndexRecord) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_semaphores_proto_rawDescGZIP(), []int{23}
}

func (x *SemaphoresExpirationGlobalIndexRecord) GetSemaphoreId() *SemaphoreId {
	if x != nil {
		return x.SemaphoreId
	}
	return nil
}

func (x *SemaphoresExpirationGlobalIndexRecord) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

var File_pkg_corepb_semaphores_proto protoreflect.FileDescriptor

var file_pkg_corepb_semaphores_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x1a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba,
	0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x52, 0x16,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x26, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68,
	0x6f, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72,
	0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x52, 0x16, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa6,
	0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68,
	0x6f, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x5e, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x66, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x17,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x73, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x22, 0x5a, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72,
	0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x73, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x52, 0x0b, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x22, 0x78,
	0x0a, 0x18, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68,
	0x6f, 0x72, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x52, 0x0b, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77,
	0x22, 0x5e, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70,
	0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6d, 0x61,
	0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
	0x22, 0xb1, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70,
	0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x73,
	0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x73, 0x65, 0x6d, 0x61, 0x70,
	0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6e, 0x6f, 0x77, 0x22, 0x5d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68,
	0x6f, 0x72, 0x65, 0x22, 0x63, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x0c, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x73, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76,
	0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x52, 0x16, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6e, 0x6f, 0x77, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x09, 0x53, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x73, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x10, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x6c, 0x0a, 0x0f, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x22, 0xac, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6d, 0x61,
	0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xe4, 0x01, 0x0a, 0x25, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
	0x73, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x67,
	0x63, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x67, 0x63, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x1e,
	0x67, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68,
	0x6f, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x67, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6d, 0x61,
	0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x47,
	0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x52, 0x16, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x65, 0x64, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
	0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x52,
	0x16, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53,
	0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x25, 0x53, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x52, 0x0b, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x42, 0x26, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x72, 0x62,
	0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_corepb_semaphores_proto_rawDescOnce sync.Once
	file_pkg_corepb_semaphores_proto_rawDescData = file_pkg_corepb_semaphores_proto_rawDesc
)

func file_pkg_corepb_semaphores_proto_rawDescGZIP() []byte {
	file_pkg_corepb_semaphores_proto_rawDescOnce.Do(func() {
		file_pkg_corepb_semaphores_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_corepb_semaphores_proto_rawDescData)
	})
	return file_pkg_corepb_semaphores_proto_rawDescData
}

var file_pkg_corepb_semaphores_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_pkg_corepb_semaphores_proto_goTypes = []any{
	(*CreateSemaphoreRequest)(nil),                 // 0: com.evrblk.grackle.corepb.CreateSemaphoreRequest
	(*CreateSemaphoreResponse)(nil),                // 1: com.evrblk.grackle.corepb.CreateSemaphoreResponse
	(*ListSemaphoresRequest)(nil),                  // 2: com.evrblk.grackle.corepb.ListSemaphoresRequest
	(*ListSemaphoresResponse)(nil),                 // 3: com.evrblk.grackle.corepb.ListSemaphoresResponse
	(*GetSemaphoreRequest)(nil),                    // 4: com.evrblk.grackle.corepb.GetSemaphoreRequest
	(*GetSemaphoreResponse)(nil),                   // 5: com.evrblk.grackle.corepb.GetSemaphoreResponse
	(*AcquireSemaphoreRequest)(nil),                // 6: com.evrblk.grackle.corepb.AcquireSemaphoreRequest
	(*AcquireSemaphoreResponse)(nil),               // 7: com.evrblk.grackle.corepb.AcquireSemaphoreResponse
	(*ReleaseSemaphoreRequest)(nil),                // 8: com.evrblk.grackle.corepb.ReleaseSemaphoreRequest
	(*ReleaseSemaphoreResponse)(nil),               // 9: com.evrblk.grackle.corepb.ReleaseSemaphoreResponse
	(*UpdateSemaphoreRequest)(nil),                 // 10: com.evrblk.grackle.corepb.UpdateSemaphoreRequest
	(*UpdateSemaphoreResponse)(nil),                // 11: com.evrblk.grackle.corepb.UpdateSemaphoreResponse
	(*DeleteSemaphoreRequest)(nil),                 // 12: com.evrblk.grackle.corepb.DeleteSemaphoreRequest
	(*DeleteSemaphoreResponse)(nil),                // 13: com.evrblk.grackle.corepb.DeleteSemaphoreResponse
	(*SemaphoresDeleteNamespaceRequest)(nil),       // 14: com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceRequest
	(*SemaphoresDeleteNamespaceResponse)(nil),      // 15: com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceResponse
	(*Semaphore)(nil),                              // 16: com.evrblk.grackle.corepb.Semaphore
	(*SemaphoreHolder)(nil),                        // 17: com.evrblk.grackle.corepb.SemaphoreHolder
	(*SemaphoreId)(nil),                            // 18: com.evrblk.grackle.corepb.SemaphoreId
	(*RunSemaphoresGarbageCollectionRequest)(nil),  // 19: com.evrblk.grackle.corepb.RunSemaphoresGarbageCollectionRequest
	(*RunSemaphoresGarbageCollectionResponse)(nil), // 20: com.evrblk.grackle.corepb.RunSemaphoresGarbageCollectionResponse
	(*SemaphoresGCRecord)(nil),                     // 21: com.evrblk.grackle.corepb.SemaphoresGCRecord
	(*SemaphoresCounter)(nil),                      // 22: com.evrblk.grackle.corepb.SemaphoresCounter
	(*SemaphoresExpirationGlobalIndexRecord)(nil),  // 23: com.evrblk.grackle.corepb.SemaphoresExpirationGlobalIndexRecord
	(*NamespaceTimestampedId)(nil),                 // 24: com.evrblk.grackle.corepb.NamespaceTimestampedId
	(*PaginationToken)(nil),                        // 25: com.evrblk.grackle.corepb.PaginationToken
}
var file_pkg_corepb_semaphores_proto_depIdxs = []int32{
	24, // 0: com.evrblk.grackle.corepb.CreateSemaphoreRequest.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	16, // 1: com.evrblk.grackle.corepb.CreateSemaphoreResponse.semaphore:type_name -> com.evrblk.grackle.corepb.Semaphore
	24, // 2: com.evrblk.grackle.corepb.ListSemaphoresRequest.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	25, // 3: com.evrblk.grackle.corepb.ListSemaphoresRequest.pagination_token:type_name -> com.evrblk.grackle.corepb.PaginationToken
	16, // 4: com.evrblk.grackle.corepb.ListSemaphoresResponse.semaphores:type_name -> com.evrblk.grackle.corepb.Semaphore
	25, // 5: com.evrblk.grackle.corepb.ListSemaphoresResponse.next_pagination_token:type_name -> com.evrblk.grackle.corepb.PaginationToken
	25, // 6: com.evrblk.grackle.corepb.ListSemaphoresResponse.previous_pagination_token:type_name -> com.evrblk.grackle.corepb.PaginationToken
	18, // 7: com.evrblk.grackle.corepb.GetSemaphoreRequest.semaphore_id:type_name -> com.evrblk.grackle.corepb.SemaphoreId
	16, // 8: com.evrblk.grackle.corepb.GetSemaphoreResponse.semaphore:type_name -> com.evrblk.grackle.corepb.Semaphore
	18, // 9: com.evrblk.grackle.corepb.AcquireSemaphoreRequest.semaphore_id:type_name -> com.evrblk.grackle.corepb.SemaphoreId
	16, // 10: com.evrblk.grackle.corepb.AcquireSemaphoreResponse.semaphore:type_name -> com.evrblk.grackle.corepb.Semaphore
	18, // 11: com.evrblk.grackle.corepb.ReleaseSemaphoreRequest.semaphore_id:type_name -> com.evrblk.grackle.corepb.SemaphoreId
	16, // 12: com.evrblk.grackle.corepb.ReleaseSemaphoreResponse.semaphore:type_name -> com.evrblk.grackle.corepb.Semaphore
	18, // 13: com.evrblk.grackle.corepb.UpdateSemaphoreRequest.semaphore_id:type_name -> com.evrblk.grackle.corepb.SemaphoreId
	16, // 14: com.evrblk.grackle.corepb.UpdateSemaphoreResponse.semaphore:type_name -> com.evrblk.grackle.corepb.Semaphore
	18, // 15: com.evrblk.grackle.corepb.DeleteSemaphoreRequest.semaphore_id:type_name -> com.evrblk.grackle.corepb.SemaphoreId
	24, // 16: com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceRequest.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	18, // 17: com.evrblk.grackle.corepb.Semaphore.id:type_name -> com.evrblk.grackle.corepb.SemaphoreId
	17, // 18: com.evrblk.grackle.corepb.Semaphore.semaphore_holders:type_name -> com.evrblk.grackle.corepb.SemaphoreHolder
	24, // 19: com.evrblk.grackle.corepb.SemaphoresGCRecord.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	24, // 20: com.evrblk.grackle.corepb.SemaphoresCounter.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	18, // 21: com.evrblk.grackle.corepb.SemaphoresExpirationGlobalIndexRecord.semaphore_id:type_name -> com.evrblk.grackle.corepb.SemaphoreId
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_pkg_corepb_semaphores_proto_init() }
func file_pkg_corepb_semaphores_proto_init() {
	if File_pkg_corepb_semaphores_proto != nil {
		return
	}
	file_pkg_corepb_common_proto_init()
	file_pkg_corepb_namespaces_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_corepb_semaphores_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_corepb_semaphores_proto_goTypes,
		DependencyIndexes: file_pkg_corepb_semaphores_proto_depIdxs,
		MessageInfos:      file_pkg_corepb_semaphores_proto_msgTypes,
	}.Build()
	File_pkg_corepb_semaphores_proto = out.File
	file_pkg_corepb_semaphores_proto_rawDesc = nil
	file_pkg_corepb_semaphores_proto_goTypes = nil
	file_pkg_corepb_semaphores_proto_depIdxs = nil
}
