// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.32.0
// source: pkg/corepb/locks.proto

package corepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LockState int32

const (
	LockState_UNLOCKED     LockState = 0
	LockState_READ_LOCKED  LockState = 1
	LockState_WRITE_LOCKED LockState = 2
)

// Enum value maps for LockState.
var (
	LockState_name = map[int32]string{
		0: "UNLOCKED",
		1: "READ_LOCKED",
		2: "WRITE_LOCKED",
	}
	LockState_value = map[string]int32{
		"UNLOCKED":     0,
		"READ_LOCKED":  1,
		"WRITE_LOCKED": 2,
	}
)

func (x LockState) Enum() *LockState {
	p := new(LockState)
	*p = x
	return p
}

func (x LockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_corepb_locks_proto_enumTypes[0].Descriptor()
}

func (LockState) Type() protoreflect.EnumType {
	return &file_pkg_corepb_locks_proto_enumTypes[0]
}

func (x LockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockState.Descriptor instead.
func (LockState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{0}
}

type AcquireLockRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	LockId                       *LockId                `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	ProcessId                    string                 `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	WriteLock                    bool                   `protobuf:"varint,3,opt,name=write_lock,json=writeLock,proto3" json:"write_lock,omitempty"`
	Now                          int64                  `protobuf:"varint,4,opt,name=now,proto3" json:"now,omitempty"`
	ExpiresAt                    int64                  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	MaxNumberOfLocksPerNamespace int64                  `protobuf:"varint,6,opt,name=max_number_of_locks_per_namespace,json=maxNumberOfLocksPerNamespace,proto3" json:"max_number_of_locks_per_namespace,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *AcquireLockRequest) Reset() {
	*x = AcquireLockRequest{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLockRequest) ProtoMessage() {}

func (x *AcquireLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLockRequest.ProtoReflect.Descriptor instead.
func (*AcquireLockRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{0}
}

func (x *AcquireLockRequest) GetLockId() *LockId {
	if x != nil {
		return x.LockId
	}
	return nil
}

func (x *AcquireLockRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *AcquireLockRequest) GetWriteLock() bool {
	if x != nil {
		return x.WriteLock
	}
	return false
}

func (x *AcquireLockRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *AcquireLockRequest) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *AcquireLockRequest) GetMaxNumberOfLocksPerNamespace() int64 {
	if x != nil {
		return x.MaxNumberOfLocksPerNamespace
	}
	return 0
}

type AcquireLockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lock          *Lock                  `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireLockResponse) Reset() {
	*x = AcquireLockResponse{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLockResponse) ProtoMessage() {}

func (x *AcquireLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLockResponse.ProtoReflect.Descriptor instead.
func (*AcquireLockResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{1}
}

func (x *AcquireLockResponse) GetLock() *Lock {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *AcquireLockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReleaseLockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LockId        *LockId                `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	ProcessId     string                 `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Now           int64                  `protobuf:"varint,3,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseLockRequest) Reset() {
	*x = ReleaseLockRequest{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLockRequest) ProtoMessage() {}

func (x *ReleaseLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLockRequest.ProtoReflect.Descriptor instead.
func (*ReleaseLockRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{2}
}

func (x *ReleaseLockRequest) GetLockId() *LockId {
	if x != nil {
		return x.LockId
	}
	return nil
}

func (x *ReleaseLockRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *ReleaseLockRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type ReleaseLockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lock          *Lock                  `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseLockResponse) Reset() {
	*x = ReleaseLockResponse{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLockResponse) ProtoMessage() {}

func (x *ReleaseLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLockResponse.ProtoReflect.Descriptor instead.
func (*ReleaseLockResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{3}
}

func (x *ReleaseLockResponse) GetLock() *Lock {
	if x != nil {
		return x.Lock
	}
	return nil
}

type GetLockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LockId        *LockId                `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	Now           int64                  `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLockRequest) Reset() {
	*x = GetLockRequest{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockRequest) ProtoMessage() {}

func (x *GetLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockRequest.ProtoReflect.Descriptor instead.
func (*GetLockRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{4}
}

func (x *GetLockRequest) GetLockId() *LockId {
	if x != nil {
		return x.LockId
	}
	return nil
}

func (x *GetLockRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type GetLockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lock          *Lock                  `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLockResponse) Reset() {
	*x = GetLockResponse{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockResponse) ProtoMessage() {}

func (x *GetLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockResponse.ProtoReflect.Descriptor instead.
func (*GetLockResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{5}
}

func (x *GetLockResponse) GetLock() *Lock {
	if x != nil {
		return x.Lock
	}
	return nil
}

type DeleteLockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LockId        *LockId                `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	Now           int64                  `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLockRequest) Reset() {
	*x = DeleteLockRequest{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLockRequest) ProtoMessage() {}

func (x *DeleteLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLockRequest.ProtoReflect.Descriptor instead.
func (*DeleteLockRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteLockRequest) GetLockId() *LockId {
	if x != nil {
		return x.LockId
	}
	return nil
}

func (x *DeleteLockRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type DeleteLockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLockResponse) Reset() {
	*x = DeleteLockResponse{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLockResponse) ProtoMessage() {}

func (x *DeleteLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLockResponse.ProtoReflect.Descriptor instead.
func (*DeleteLockResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{7}
}

type ListLocksRequest struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	NamespaceTimestampedId *NamespaceTimestampedId `protobuf:"bytes,1,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	Now                    int64                   `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
	PaginationToken        *PaginationToken        `protobuf:"bytes,3,opt,name=pagination_token,json=paginationToken,proto3" json:"pagination_token,omitempty"`
	Limit                  int32                   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ListLocksRequest) Reset() {
	*x = ListLocksRequest{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLocksRequest) ProtoMessage() {}

func (x *ListLocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLocksRequest.ProtoReflect.Descriptor instead.
func (*ListLocksRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{8}
}

func (x *ListLocksRequest) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

func (x *ListLocksRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *ListLocksRequest) GetPaginationToken() *PaginationToken {
	if x != nil {
		return x.PaginationToken
	}
	return nil
}

func (x *ListLocksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListLocksResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Locks                   []*Lock                `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
	NextPaginationToken     *PaginationToken       `protobuf:"bytes,2,opt,name=next_pagination_token,json=nextPaginationToken,proto3" json:"next_pagination_token,omitempty"`
	PreviousPaginationToken *PaginationToken       `protobuf:"bytes,3,opt,name=previous_pagination_token,json=previousPaginationToken,proto3" json:"previous_pagination_token,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ListLocksResponse) Reset() {
	*x = ListLocksResponse{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLocksResponse) ProtoMessage() {}

func (x *ListLocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLocksResponse.ProtoReflect.Descriptor instead.
func (*ListLocksResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{9}
}

func (x *ListLocksResponse) GetLocks() []*Lock {
	if x != nil {
		return x.Locks
	}
	return nil
}

func (x *ListLocksResponse) GetNextPaginationToken() *PaginationToken {
	if x != nil {
		return x.NextPaginationToken
	}
	return nil
}

func (x *ListLocksResponse) GetPreviousPaginationToken() *PaginationToken {
	if x != nil {
		return x.PreviousPaginationToken
	}
	return nil
}

type RunLocksGarbageCollectionRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Now                   int64                  `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`
	GcRecordsPageSize     int64                  `protobuf:"varint,2,opt,name=gc_records_page_size,json=gcRecordsPageSize,proto3" json:"gc_records_page_size,omitempty"`
	GcRecordLocksPageSize int64                  `protobuf:"varint,3,opt,name=gc_record_locks_page_size,json=gcRecordLocksPageSize,proto3" json:"gc_record_locks_page_size,omitempty"`
	MaxVisitedLocks       int64                  `protobuf:"varint,4,opt,name=max_visited_locks,json=maxVisitedLocks,proto3" json:"max_visited_locks,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RunLocksGarbageCollectionRequest) Reset() {
	*x = RunLocksGarbageCollectionRequest{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunLocksGarbageCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLocksGarbageCollectionRequest) ProtoMessage() {}

func (x *RunLocksGarbageCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLocksGarbageCollectionRequest.ProtoReflect.Descriptor instead.
func (*RunLocksGarbageCollectionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{10}
}

func (x *RunLocksGarbageCollectionRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *RunLocksGarbageCollectionRequest) GetGcRecordsPageSize() int64 {
	if x != nil {
		return x.GcRecordsPageSize
	}
	return 0
}

func (x *RunLocksGarbageCollectionRequest) GetGcRecordLocksPageSize() int64 {
	if x != nil {
		return x.GcRecordLocksPageSize
	}
	return 0
}

func (x *RunLocksGarbageCollectionRequest) GetMaxVisitedLocks() int64 {
	if x != nil {
		return x.MaxVisitedLocks
	}
	return 0
}

type RunLocksGarbageCollectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunLocksGarbageCollectionResponse) Reset() {
	*x = RunLocksGarbageCollectionResponse{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunLocksGarbageCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLocksGarbageCollectionResponse) ProtoMessage() {}

func (x *RunLocksGarbageCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLocksGarbageCollectionResponse.ProtoReflect.Descriptor instead.
func (*RunLocksGarbageCollectionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{11}
}

type LocksDeleteNamespaceRequest struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	NamespaceTimestampedId *NamespaceTimestampedId `protobuf:"bytes,1,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	RecordId               uint64                  `protobuf:"varint,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Now                    int64                   `protobuf:"varint,3,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LocksDeleteNamespaceRequest) Reset() {
	*x = LocksDeleteNamespaceRequest{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocksDeleteNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocksDeleteNamespaceRequest) ProtoMessage() {}

func (x *LocksDeleteNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocksDeleteNamespaceRequest.ProtoReflect.Descriptor instead.
func (*LocksDeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{12}
}

func (x *LocksDeleteNamespaceRequest) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

func (x *LocksDeleteNamespaceRequest) GetRecordId() uint64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *LocksDeleteNamespaceRequest) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type LocksDeleteNamespaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocksDeleteNamespaceResponse) Reset() {
	*x = LocksDeleteNamespaceResponse{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocksDeleteNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocksDeleteNamespaceResponse) ProtoMessage() {}

func (x *LocksDeleteNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocksDeleteNamespaceResponse.ProtoReflect.Descriptor instead.
func (*LocksDeleteNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{13}
}

type Lock struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              *LockId                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State           LockState              `protobuf:"varint,2,opt,name=state,proto3,enum=com.evrblk.grackle.corepb.LockState" json:"state,omitempty"`
	LockedAt        int64                  `protobuf:"varint,3,opt,name=locked_at,json=lockedAt,proto3" json:"locked_at,omitempty"`
	WriteLockHolder *LockHolder            `protobuf:"bytes,4,opt,name=write_lock_holder,json=writeLockHolder,proto3" json:"write_lock_holder,omitempty"`
	ReadLockHolders []*LockHolder          `protobuf:"bytes,5,rep,name=read_lock_holders,json=readLockHolders,proto3" json:"read_lock_holders,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Lock) Reset() {
	*x = Lock{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lock) ProtoMessage() {}

func (x *Lock) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lock.ProtoReflect.Descriptor instead.
func (*Lock) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{14}
}

func (x *Lock) GetId() *LockId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Lock) GetState() LockState {
	if x != nil {
		return x.State
	}
	return LockState_UNLOCKED
}

func (x *Lock) GetLockedAt() int64 {
	if x != nil {
		return x.LockedAt
	}
	return 0
}

func (x *Lock) GetWriteLockHolder() *LockHolder {
	if x != nil {
		return x.WriteLockHolder
	}
	return nil
}

func (x *Lock) GetReadLockHolders() []*LockHolder {
	if x != nil {
		return x.ReadLockHolders
	}
	return nil
}

type LockHolder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProcessId     string                 `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	LockedAt      int64                  `protobuf:"varint,2,opt,name=locked_at,json=lockedAt,proto3" json:"locked_at,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockHolder) Reset() {
	*x = LockHolder{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockHolder) ProtoMessage() {}

func (x *LockHolder) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockHolder.ProtoReflect.Descriptor instead.
func (*LockHolder) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{15}
}

func (x *LockHolder) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *LockHolder) GetLockedAt() int64 {
	if x != nil {
		return x.LockedAt
	}
	return 0
}

func (x *LockHolder) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type LockId struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AccountId          uint64                 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	NamespaceName      string                 `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	NamespaceCreatedAt int64                  `protobuf:"varint,3,opt,name=namespace_created_at,json=namespaceCreatedAt,proto3" json:"namespace_created_at,omitempty"`
	LockName           string                 `protobuf:"bytes,4,opt,name=lock_name,json=lockName,proto3" json:"lock_name,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LockId) Reset() {
	*x = LockId{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockId) ProtoMessage() {}

func (x *LockId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockId.ProtoReflect.Descriptor instead.
func (*LockId) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{16}
}

func (x *LockId) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *LockId) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *LockId) GetNamespaceCreatedAt() int64 {
	if x != nil {
		return x.NamespaceCreatedAt
	}
	return 0
}

func (x *LockId) GetLockName() string {
	if x != nil {
		return x.LockName
	}
	return ""
}

type LocksCounter struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	NamespaceTimestampedId *NamespaceTimestampedId `protobuf:"bytes,1,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	NumberOfLocks          int64                   `protobuf:"varint,2,opt,name=number_of_locks,json=numberOfLocks,proto3" json:"number_of_locks,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LocksCounter) Reset() {
	*x = LocksCounter{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocksCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocksCounter) ProtoMessage() {}

func (x *LocksCounter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocksCounter.ProtoReflect.Descriptor instead.
func (*LocksCounter) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{17}
}

func (x *LocksCounter) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

func (x *LocksCounter) GetNumberOfLocks() int64 {
	if x != nil {
		return x.NumberOfLocks
	}
	return 0
}

type LocksGCRecord struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	Id                     uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NamespaceTimestampedId *NamespaceTimestampedId `protobuf:"bytes,2,opt,name=namespace_timestamped_id,json=namespaceTimestampedId,proto3" json:"namespace_timestamped_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LocksGCRecord) Reset() {
	*x = LocksGCRecord{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocksGCRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocksGCRecord) ProtoMessage() {}

func (x *LocksGCRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocksGCRecord.ProtoReflect.Descriptor instead.
func (*LocksGCRecord) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{18}
}

func (x *LocksGCRecord) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocksGCRecord) GetNamespaceTimestampedId() *NamespaceTimestampedId {
	if x != nil {
		return x.NamespaceTimestampedId
	}
	return nil
}

type LocksExpirationGlobalIndexRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LockId        *LockId                `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocksExpirationGlobalIndexRecord) Reset() {
	*x = LocksExpirationGlobalIndexRecord{}
	mi := &file_pkg_corepb_locks_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocksExpirationGlobalIndexRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocksExpirationGlobalIndexRecord) ProtoMessage() {}

func (x *LocksExpirationGlobalIndexRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_locks_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocksExpirationGlobalIndexRecord.ProtoReflect.Descriptor instead.
func (*LocksExpirationGlobalIndexRecord) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_locks_proto_rawDescGZIP(), []int{19}
}

func (x *LocksExpirationGlobalIndexRecord) GetLockId() *LockId {
	if x != nil {
		return x.LockId
	}
	return nil
}

func (x *LocksExpirationGlobalIndexRecord) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

var File_pkg_corepb_locks_proto protoreflect.FileDescriptor

var file_pkg_corepb_locks_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76,
	0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x70, 0x62, 0x1a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6b,
	0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x21, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x64, 0x0a, 0x13, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x22, 0x4a,
	0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x5e, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x61, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x6f, 0x77, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x49, 0x64, 0x52, 0x16, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12,
	0x55, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x92, 0x02, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x66, 0x0a, 0x19, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x20, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x47, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x63, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x67, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x67, 0x63, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x63,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x22,
	0x23, 0x0a, 0x21, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x47, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1b, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72,
	0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x52, 0x16, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77,
	0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb8, 0x02, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64,
	0x4c, 0x6f, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x67, 0x0a, 0x0a, 0x4c,
	0x6f, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76,
	0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x52, 0x16, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x47, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6b, 0x0a, 0x18,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49,
	0x64, 0x52, 0x16, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x20, 0x4c, 0x6f, 0x63,
	0x6b, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x2a, 0x3c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_corepb_locks_proto_rawDescOnce sync.Once
	file_pkg_corepb_locks_proto_rawDescData = file_pkg_corepb_locks_proto_rawDesc
)

func file_pkg_corepb_locks_proto_rawDescGZIP() []byte {
	file_pkg_corepb_locks_proto_rawDescOnce.Do(func() {
		file_pkg_corepb_locks_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_corepb_locks_proto_rawDescData)
	})
	return file_pkg_corepb_locks_proto_rawDescData
}

var file_pkg_corepb_locks_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_corepb_locks_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_pkg_corepb_locks_proto_goTypes = []any{
	(LockState)(0),                            // 0: com.evrblk.grackle.corepb.LockState
	(*AcquireLockRequest)(nil),                // 1: com.evrblk.grackle.corepb.AcquireLockRequest
	(*AcquireLockResponse)(nil),               // 2: com.evrblk.grackle.corepb.AcquireLockResponse
	(*ReleaseLockRequest)(nil),                // 3: com.evrblk.grackle.corepb.ReleaseLockRequest
	(*ReleaseLockResponse)(nil),               // 4: com.evrblk.grackle.corepb.ReleaseLockResponse
	(*GetLockRequest)(nil),                    // 5: com.evrblk.grackle.corepb.GetLockRequest
	(*GetLockResponse)(nil),                   // 6: com.evrblk.grackle.corepb.GetLockResponse
	(*DeleteLockRequest)(nil),                 // 7: com.evrblk.grackle.corepb.DeleteLockRequest
	(*DeleteLockResponse)(nil),                // 8: com.evrblk.grackle.corepb.DeleteLockResponse
	(*ListLocksRequest)(nil),                  // 9: com.evrblk.grackle.corepb.ListLocksRequest
	(*ListLocksResponse)(nil),                 // 10: com.evrblk.grackle.corepb.ListLocksResponse
	(*RunLocksGarbageCollectionRequest)(nil),  // 11: com.evrblk.grackle.corepb.RunLocksGarbageCollectionRequest
	(*RunLocksGarbageCollectionResponse)(nil), // 12: com.evrblk.grackle.corepb.RunLocksGarbageCollectionResponse
	(*LocksDeleteNamespaceRequest)(nil),       // 13: com.evrblk.grackle.corepb.LocksDeleteNamespaceRequest
	(*LocksDeleteNamespaceResponse)(nil),      // 14: com.evrblk.grackle.corepb.LocksDeleteNamespaceResponse
	(*Lock)(nil),                              // 15: com.evrblk.grackle.corepb.Lock
	(*LockHolder)(nil),                        // 16: com.evrblk.grackle.corepb.LockHolder
	(*LockId)(nil),                            // 17: com.evrblk.grackle.corepb.LockId
	(*LocksCounter)(nil),                      // 18: com.evrblk.grackle.corepb.LocksCounter
	(*LocksGCRecord)(nil),                     // 19: com.evrblk.grackle.corepb.LocksGCRecord
	(*LocksExpirationGlobalIndexRecord)(nil),  // 20: com.evrblk.grackle.corepb.LocksExpirationGlobalIndexRecord
	(*NamespaceTimestampedId)(nil),            // 21: com.evrblk.grackle.corepb.NamespaceTimestampedId
	(*PaginationToken)(nil),                   // 22: com.evrblk.grackle.corepb.PaginationToken
}
var file_pkg_corepb_locks_proto_depIdxs = []int32{
	17, // 0: com.evrblk.grackle.corepb.AcquireLockRequest.lock_id:type_name -> com.evrblk.grackle.corepb.LockId
	15, // 1: com.evrblk.grackle.corepb.AcquireLockResponse.lock:type_name -> com.evrblk.grackle.corepb.Lock
	17, // 2: com.evrblk.grackle.corepb.ReleaseLockRequest.lock_id:type_name -> com.evrblk.grackle.corepb.LockId
	15, // 3: com.evrblk.grackle.corepb.ReleaseLockResponse.lock:type_name -> com.evrblk.grackle.corepb.Lock
	17, // 4: com.evrblk.grackle.corepb.GetLockRequest.lock_id:type_name -> com.evrblk.grackle.corepb.LockId
	15, // 5: com.evrblk.grackle.corepb.GetLockResponse.lock:type_name -> com.evrblk.grackle.corepb.Lock
	17, // 6: com.evrblk.grackle.corepb.DeleteLockRequest.lock_id:type_name -> com.evrblk.grackle.corepb.LockId
	21, // 7: com.evrblk.grackle.corepb.ListLocksRequest.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	22, // 8: com.evrblk.grackle.corepb.ListLocksRequest.pagination_token:type_name -> com.evrblk.grackle.corepb.PaginationToken
	15, // 9: com.evrblk.grackle.corepb.ListLocksResponse.locks:type_name -> com.evrblk.grackle.corepb.Lock
	22, // 10: com.evrblk.grackle.corepb.ListLocksResponse.next_pagination_token:type_name -> com.evrblk.grackle.corepb.PaginationToken
	22, // 11: com.evrblk.grackle.corepb.ListLocksResponse.previous_pagination_token:type_name -> com.evrblk.grackle.corepb.PaginationToken
	21, // 12: com.evrblk.grackle.corepb.LocksDeleteNamespaceRequest.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	17, // 13: com.evrblk.grackle.corepb.Lock.id:type_name -> com.evrblk.grackle.corepb.LockId
	0,  // 14: com.evrblk.grackle.corepb.Lock.state:type_name -> com.evrblk.grackle.corepb.LockState
	16, // 15: com.evrblk.grackle.corepb.Lock.write_lock_holder:type_name -> com.evrblk.grackle.corepb.LockHolder
	16, // 16: com.evrblk.grackle.corepb.Lock.read_lock_holders:type_name -> com.evrblk.grackle.corepb.LockHolder
	21, // 17: com.evrblk.grackle.corepb.LocksCounter.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	21, // 18: com.evrblk.grackle.corepb.LocksGCRecord.namespace_timestamped_id:type_name -> com.evrblk.grackle.corepb.NamespaceTimestampedId
	17, // 19: com.evrblk.grackle.corepb.LocksExpirationGlobalIndexRecord.lock_id:type_name -> com.evrblk.grackle.corepb.LockId
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_pkg_corepb_locks_proto_init() }
func file_pkg_corepb_locks_proto_init() {
	if File_pkg_corepb_locks_proto != nil {
		return
	}
	file_pkg_corepb_common_proto_init()
	file_pkg_corepb_namespaces_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_corepb_locks_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_corepb_locks_proto_goTypes,
		DependencyIndexes: file_pkg_corepb_locks_proto_depIdxs,
		EnumInfos:         file_pkg_corepb_locks_proto_enumTypes,
		MessageInfos:      file_pkg_corepb_locks_proto_msgTypes,
	}.Build()
	File_pkg_corepb_locks_proto = out.File
	file_pkg_corepb_locks_proto_rawDesc = nil
	file_pkg_corepb_locks_proto_goTypes = nil
	file_pkg_corepb_locks_proto_depIdxs = nil
}
