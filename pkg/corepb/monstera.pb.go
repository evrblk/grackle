// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: pkg/corepb/monstera.proto

package corepb

import (
	x "github.com/evrblk/monstera/x"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GrackleReadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*GrackleReadRequest_GetSemaphoreRequest
	//	*GrackleReadRequest_ListSemaphoresRequest
	//	*GrackleReadRequest_GetWaitGroupRequest
	//	*GrackleReadRequest_ListWaitGroupsRequest
	//	*GrackleReadRequest_GetNamespaceRequest
	//	*GrackleReadRequest_ListNamespacesRequest
	//	*GrackleReadRequest_ListLocksRequest
	Request       isGrackleReadRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrackleReadRequest) Reset() {
	*x = GrackleReadRequest{}
	mi := &file_pkg_corepb_monstera_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrackleReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrackleReadRequest) ProtoMessage() {}

func (x *GrackleReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_monstera_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrackleReadRequest.ProtoReflect.Descriptor instead.
func (*GrackleReadRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_monstera_proto_rawDescGZIP(), []int{0}
}

func (x *GrackleReadRequest) GetRequest() isGrackleReadRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GrackleReadRequest) GetGetSemaphoreRequest() *GetSemaphoreRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleReadRequest_GetSemaphoreRequest); ok {
			return x.GetSemaphoreRequest
		}
	}
	return nil
}

func (x *GrackleReadRequest) GetListSemaphoresRequest() *ListSemaphoresRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleReadRequest_ListSemaphoresRequest); ok {
			return x.ListSemaphoresRequest
		}
	}
	return nil
}

func (x *GrackleReadRequest) GetGetWaitGroupRequest() *GetWaitGroupRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleReadRequest_GetWaitGroupRequest); ok {
			return x.GetWaitGroupRequest
		}
	}
	return nil
}

func (x *GrackleReadRequest) GetListWaitGroupsRequest() *ListWaitGroupsRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleReadRequest_ListWaitGroupsRequest); ok {
			return x.ListWaitGroupsRequest
		}
	}
	return nil
}

func (x *GrackleReadRequest) GetGetNamespaceRequest() *GetNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleReadRequest_GetNamespaceRequest); ok {
			return x.GetNamespaceRequest
		}
	}
	return nil
}

func (x *GrackleReadRequest) GetListNamespacesRequest() *ListNamespacesRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleReadRequest_ListNamespacesRequest); ok {
			return x.ListNamespacesRequest
		}
	}
	return nil
}

func (x *GrackleReadRequest) GetListLocksRequest() *ListLocksRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleReadRequest_ListLocksRequest); ok {
			return x.ListLocksRequest
		}
	}
	return nil
}

type isGrackleReadRequest_Request interface {
	isGrackleReadRequest_Request()
}

type GrackleReadRequest_GetSemaphoreRequest struct {
	GetSemaphoreRequest *GetSemaphoreRequest `protobuf:"bytes,2,opt,name=get_semaphore_request,json=getSemaphoreRequest,proto3,oneof"`
}

type GrackleReadRequest_ListSemaphoresRequest struct {
	ListSemaphoresRequest *ListSemaphoresRequest `protobuf:"bytes,3,opt,name=list_semaphores_request,json=listSemaphoresRequest,proto3,oneof"`
}

type GrackleReadRequest_GetWaitGroupRequest struct {
	GetWaitGroupRequest *GetWaitGroupRequest `protobuf:"bytes,4,opt,name=get_wait_group_request,json=getWaitGroupRequest,proto3,oneof"`
}

type GrackleReadRequest_ListWaitGroupsRequest struct {
	ListWaitGroupsRequest *ListWaitGroupsRequest `protobuf:"bytes,5,opt,name=list_wait_groups_request,json=listWaitGroupsRequest,proto3,oneof"`
}

type GrackleReadRequest_GetNamespaceRequest struct {
	GetNamespaceRequest *GetNamespaceRequest `protobuf:"bytes,6,opt,name=get_namespace_request,json=getNamespaceRequest,proto3,oneof"`
}

type GrackleReadRequest_ListNamespacesRequest struct {
	ListNamespacesRequest *ListNamespacesRequest `protobuf:"bytes,7,opt,name=list_namespaces_request,json=listNamespacesRequest,proto3,oneof"`
}

type GrackleReadRequest_ListLocksRequest struct {
	ListLocksRequest *ListLocksRequest `protobuf:"bytes,8,opt,name=list_locks_request,json=listLocksRequest,proto3,oneof"`
}

func (*GrackleReadRequest_GetSemaphoreRequest) isGrackleReadRequest_Request() {}

func (*GrackleReadRequest_ListSemaphoresRequest) isGrackleReadRequest_Request() {}

func (*GrackleReadRequest_GetWaitGroupRequest) isGrackleReadRequest_Request() {}

func (*GrackleReadRequest_ListWaitGroupsRequest) isGrackleReadRequest_Request() {}

func (*GrackleReadRequest_GetNamespaceRequest) isGrackleReadRequest_Request() {}

func (*GrackleReadRequest_ListNamespacesRequest) isGrackleReadRequest_Request() {}

func (*GrackleReadRequest_ListLocksRequest) isGrackleReadRequest_Request() {}

type GrackleReadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *x.Error               `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*GrackleReadResponse_GetSemaphoreResponse
	//	*GrackleReadResponse_ListSemaphoresResponse
	//	*GrackleReadResponse_GetWaitGroupResponse
	//	*GrackleReadResponse_ListWaitGroupsResponse
	//	*GrackleReadResponse_GetNamespaceResponse
	//	*GrackleReadResponse_ListNamespacesResponse
	//	*GrackleReadResponse_ListLocksResponse
	Response      isGrackleReadResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrackleReadResponse) Reset() {
	*x = GrackleReadResponse{}
	mi := &file_pkg_corepb_monstera_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrackleReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrackleReadResponse) ProtoMessage() {}

func (x *GrackleReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_monstera_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrackleReadResponse.ProtoReflect.Descriptor instead.
func (*GrackleReadResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_monstera_proto_rawDescGZIP(), []int{1}
}

func (x *GrackleReadResponse) GetError() *x.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GrackleReadResponse) GetResponse() isGrackleReadResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GrackleReadResponse) GetGetSemaphoreResponse() *GetSemaphoreResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleReadResponse_GetSemaphoreResponse); ok {
			return x.GetSemaphoreResponse
		}
	}
	return nil
}

func (x *GrackleReadResponse) GetListSemaphoresResponse() *ListSemaphoresResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleReadResponse_ListSemaphoresResponse); ok {
			return x.ListSemaphoresResponse
		}
	}
	return nil
}

func (x *GrackleReadResponse) GetGetWaitGroupResponse() *GetWaitGroupResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleReadResponse_GetWaitGroupResponse); ok {
			return x.GetWaitGroupResponse
		}
	}
	return nil
}

func (x *GrackleReadResponse) GetListWaitGroupsResponse() *ListWaitGroupsResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleReadResponse_ListWaitGroupsResponse); ok {
			return x.ListWaitGroupsResponse
		}
	}
	return nil
}

func (x *GrackleReadResponse) GetGetNamespaceResponse() *GetNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleReadResponse_GetNamespaceResponse); ok {
			return x.GetNamespaceResponse
		}
	}
	return nil
}

func (x *GrackleReadResponse) GetListNamespacesResponse() *ListNamespacesResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleReadResponse_ListNamespacesResponse); ok {
			return x.ListNamespacesResponse
		}
	}
	return nil
}

func (x *GrackleReadResponse) GetListLocksResponse() *ListLocksResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleReadResponse_ListLocksResponse); ok {
			return x.ListLocksResponse
		}
	}
	return nil
}

type isGrackleReadResponse_Response interface {
	isGrackleReadResponse_Response()
}

type GrackleReadResponse_GetSemaphoreResponse struct {
	GetSemaphoreResponse *GetSemaphoreResponse `protobuf:"bytes,2,opt,name=get_semaphore_response,json=getSemaphoreResponse,proto3,oneof"`
}

type GrackleReadResponse_ListSemaphoresResponse struct {
	ListSemaphoresResponse *ListSemaphoresResponse `protobuf:"bytes,3,opt,name=list_semaphores_response,json=listSemaphoresResponse,proto3,oneof"`
}

type GrackleReadResponse_GetWaitGroupResponse struct {
	GetWaitGroupResponse *GetWaitGroupResponse `protobuf:"bytes,4,opt,name=get_wait_group_response,json=getWaitGroupResponse,proto3,oneof"`
}

type GrackleReadResponse_ListWaitGroupsResponse struct {
	ListWaitGroupsResponse *ListWaitGroupsResponse `protobuf:"bytes,5,opt,name=list_wait_groups_response,json=listWaitGroupsResponse,proto3,oneof"`
}

type GrackleReadResponse_GetNamespaceResponse struct {
	GetNamespaceResponse *GetNamespaceResponse `protobuf:"bytes,6,opt,name=get_namespace_response,json=getNamespaceResponse,proto3,oneof"`
}

type GrackleReadResponse_ListNamespacesResponse struct {
	ListNamespacesResponse *ListNamespacesResponse `protobuf:"bytes,7,opt,name=list_namespaces_response,json=listNamespacesResponse,proto3,oneof"`
}

type GrackleReadResponse_ListLocksResponse struct {
	ListLocksResponse *ListLocksResponse `protobuf:"bytes,8,opt,name=list_locks_response,json=listLocksResponse,proto3,oneof"`
}

func (*GrackleReadResponse_GetSemaphoreResponse) isGrackleReadResponse_Response() {}

func (*GrackleReadResponse_ListSemaphoresResponse) isGrackleReadResponse_Response() {}

func (*GrackleReadResponse_GetWaitGroupResponse) isGrackleReadResponse_Response() {}

func (*GrackleReadResponse_ListWaitGroupsResponse) isGrackleReadResponse_Response() {}

func (*GrackleReadResponse_GetNamespaceResponse) isGrackleReadResponse_Response() {}

func (*GrackleReadResponse_ListNamespacesResponse) isGrackleReadResponse_Response() {}

func (*GrackleReadResponse_ListLocksResponse) isGrackleReadResponse_Response() {}

type GrackleUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*GrackleUpdateRequest_CreateSemaphoreRequest
	//	*GrackleUpdateRequest_UpdateSemaphoreRequest
	//	*GrackleUpdateRequest_DeleteSemaphoreRequest
	//	*GrackleUpdateRequest_AcquireSemaphoreRequest
	//	*GrackleUpdateRequest_ReleaseSemaphoreRequest
	//	*GrackleUpdateRequest_RunSemaphoresGarbageCollectionRequest
	//	*GrackleUpdateRequest_SemaphoresDeleteNamespaceRequest
	//	*GrackleUpdateRequest_CreateWaitGroupRequest
	//	*GrackleUpdateRequest_DeleteWaitGroupRequest
	//	*GrackleUpdateRequest_AddJobsToWaitGroupRequest
	//	*GrackleUpdateRequest_CompleteJobsFromWaitGroupRequest
	//	*GrackleUpdateRequest_RunWaitGroupsGarbageCollectionRequest
	//	*GrackleUpdateRequest_WaitGroupsDeleteNamespaceRequest
	//	*GrackleUpdateRequest_AcquireLockRequest
	//	*GrackleUpdateRequest_ReleaseLockRequest
	//	*GrackleUpdateRequest_DeleteLockRequest
	//	*GrackleUpdateRequest_GetLockRequest
	//	*GrackleUpdateRequest_RunLocksGarbageCollectionRequest
	//	*GrackleUpdateRequest_LocksDeleteNamespaceRequest
	//	*GrackleUpdateRequest_CreateNamespaceRequest
	//	*GrackleUpdateRequest_UpdateNamespaceRequest
	//	*GrackleUpdateRequest_DeleteNamespaceRequest
	Request       isGrackleUpdateRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrackleUpdateRequest) Reset() {
	*x = GrackleUpdateRequest{}
	mi := &file_pkg_corepb_monstera_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrackleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrackleUpdateRequest) ProtoMessage() {}

func (x *GrackleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_monstera_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrackleUpdateRequest.ProtoReflect.Descriptor instead.
func (*GrackleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_monstera_proto_rawDescGZIP(), []int{2}
}

func (x *GrackleUpdateRequest) GetRequest() isGrackleUpdateRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GrackleUpdateRequest) GetCreateSemaphoreRequest() *CreateSemaphoreRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_CreateSemaphoreRequest); ok {
			return x.CreateSemaphoreRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetUpdateSemaphoreRequest() *UpdateSemaphoreRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_UpdateSemaphoreRequest); ok {
			return x.UpdateSemaphoreRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetDeleteSemaphoreRequest() *DeleteSemaphoreRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_DeleteSemaphoreRequest); ok {
			return x.DeleteSemaphoreRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetAcquireSemaphoreRequest() *AcquireSemaphoreRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_AcquireSemaphoreRequest); ok {
			return x.AcquireSemaphoreRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetReleaseSemaphoreRequest() *ReleaseSemaphoreRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_ReleaseSemaphoreRequest); ok {
			return x.ReleaseSemaphoreRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetRunSemaphoresGarbageCollectionRequest() *RunSemaphoresGarbageCollectionRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_RunSemaphoresGarbageCollectionRequest); ok {
			return x.RunSemaphoresGarbageCollectionRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetSemaphoresDeleteNamespaceRequest() *SemaphoresDeleteNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_SemaphoresDeleteNamespaceRequest); ok {
			return x.SemaphoresDeleteNamespaceRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetCreateWaitGroupRequest() *CreateWaitGroupRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_CreateWaitGroupRequest); ok {
			return x.CreateWaitGroupRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetDeleteWaitGroupRequest() *DeleteWaitGroupRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_DeleteWaitGroupRequest); ok {
			return x.DeleteWaitGroupRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetAddJobsToWaitGroupRequest() *AddJobsToWaitGroupRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_AddJobsToWaitGroupRequest); ok {
			return x.AddJobsToWaitGroupRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetCompleteJobsFromWaitGroupRequest() *CompleteJobsFromWaitGroupRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_CompleteJobsFromWaitGroupRequest); ok {
			return x.CompleteJobsFromWaitGroupRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetRunWaitGroupsGarbageCollectionRequest() *RunWaitGroupsGarbageCollectionRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_RunWaitGroupsGarbageCollectionRequest); ok {
			return x.RunWaitGroupsGarbageCollectionRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetWaitGroupsDeleteNamespaceRequest() *WaitGroupsDeleteNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_WaitGroupsDeleteNamespaceRequest); ok {
			return x.WaitGroupsDeleteNamespaceRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetAcquireLockRequest() *AcquireLockRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_AcquireLockRequest); ok {
			return x.AcquireLockRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetReleaseLockRequest() *ReleaseLockRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_ReleaseLockRequest); ok {
			return x.ReleaseLockRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetDeleteLockRequest() *DeleteLockRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_DeleteLockRequest); ok {
			return x.DeleteLockRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetGetLockRequest() *GetLockRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_GetLockRequest); ok {
			return x.GetLockRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetRunLocksGarbageCollectionRequest() *RunLocksGarbageCollectionRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_RunLocksGarbageCollectionRequest); ok {
			return x.RunLocksGarbageCollectionRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetLocksDeleteNamespaceRequest() *LocksDeleteNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_LocksDeleteNamespaceRequest); ok {
			return x.LocksDeleteNamespaceRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetCreateNamespaceRequest() *CreateNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_CreateNamespaceRequest); ok {
			return x.CreateNamespaceRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetUpdateNamespaceRequest() *UpdateNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_UpdateNamespaceRequest); ok {
			return x.UpdateNamespaceRequest
		}
	}
	return nil
}

func (x *GrackleUpdateRequest) GetDeleteNamespaceRequest() *DeleteNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*GrackleUpdateRequest_DeleteNamespaceRequest); ok {
			return x.DeleteNamespaceRequest
		}
	}
	return nil
}

type isGrackleUpdateRequest_Request interface {
	isGrackleUpdateRequest_Request()
}

type GrackleUpdateRequest_CreateSemaphoreRequest struct {
	CreateSemaphoreRequest *CreateSemaphoreRequest `protobuf:"bytes,2,opt,name=create_semaphore_request,json=createSemaphoreRequest,proto3,oneof"`
}

type GrackleUpdateRequest_UpdateSemaphoreRequest struct {
	UpdateSemaphoreRequest *UpdateSemaphoreRequest `protobuf:"bytes,3,opt,name=update_semaphore_request,json=updateSemaphoreRequest,proto3,oneof"`
}

type GrackleUpdateRequest_DeleteSemaphoreRequest struct {
	DeleteSemaphoreRequest *DeleteSemaphoreRequest `protobuf:"bytes,4,opt,name=delete_semaphore_request,json=deleteSemaphoreRequest,proto3,oneof"`
}

type GrackleUpdateRequest_AcquireSemaphoreRequest struct {
	AcquireSemaphoreRequest *AcquireSemaphoreRequest `protobuf:"bytes,5,opt,name=acquire_semaphore_request,json=acquireSemaphoreRequest,proto3,oneof"`
}

type GrackleUpdateRequest_ReleaseSemaphoreRequest struct {
	ReleaseSemaphoreRequest *ReleaseSemaphoreRequest `protobuf:"bytes,6,opt,name=release_semaphore_request,json=releaseSemaphoreRequest,proto3,oneof"`
}

type GrackleUpdateRequest_RunSemaphoresGarbageCollectionRequest struct {
	RunSemaphoresGarbageCollectionRequest *RunSemaphoresGarbageCollectionRequest `protobuf:"bytes,7,opt,name=run_semaphores_garbage_collection_request,json=runSemaphoresGarbageCollectionRequest,proto3,oneof"`
}

type GrackleUpdateRequest_SemaphoresDeleteNamespaceRequest struct {
	SemaphoresDeleteNamespaceRequest *SemaphoresDeleteNamespaceRequest `protobuf:"bytes,8,opt,name=semaphores_delete_namespace_request,json=semaphoresDeleteNamespaceRequest,proto3,oneof"`
}

type GrackleUpdateRequest_CreateWaitGroupRequest struct {
	CreateWaitGroupRequest *CreateWaitGroupRequest `protobuf:"bytes,9,opt,name=create_wait_group_request,json=createWaitGroupRequest,proto3,oneof"`
}

type GrackleUpdateRequest_DeleteWaitGroupRequest struct {
	DeleteWaitGroupRequest *DeleteWaitGroupRequest `protobuf:"bytes,10,opt,name=delete_wait_group_request,json=deleteWaitGroupRequest,proto3,oneof"`
}

type GrackleUpdateRequest_AddJobsToWaitGroupRequest struct {
	AddJobsToWaitGroupRequest *AddJobsToWaitGroupRequest `protobuf:"bytes,11,opt,name=add_jobs_to_wait_group_request,json=addJobsToWaitGroupRequest,proto3,oneof"`
}

type GrackleUpdateRequest_CompleteJobsFromWaitGroupRequest struct {
	CompleteJobsFromWaitGroupRequest *CompleteJobsFromWaitGroupRequest `protobuf:"bytes,12,opt,name=complete_jobs_from_wait_group_request,json=completeJobsFromWaitGroupRequest,proto3,oneof"`
}

type GrackleUpdateRequest_RunWaitGroupsGarbageCollectionRequest struct {
	RunWaitGroupsGarbageCollectionRequest *RunWaitGroupsGarbageCollectionRequest `protobuf:"bytes,13,opt,name=run_wait_groups_garbage_collection_request,json=runWaitGroupsGarbageCollectionRequest,proto3,oneof"`
}

type GrackleUpdateRequest_WaitGroupsDeleteNamespaceRequest struct {
	WaitGroupsDeleteNamespaceRequest *WaitGroupsDeleteNamespaceRequest `protobuf:"bytes,14,opt,name=wait_groups_delete_namespace_request,json=waitGroupsDeleteNamespaceRequest,proto3,oneof"`
}

type GrackleUpdateRequest_AcquireLockRequest struct {
	AcquireLockRequest *AcquireLockRequest `protobuf:"bytes,15,opt,name=acquire_lock_request,json=acquireLockRequest,proto3,oneof"`
}

type GrackleUpdateRequest_ReleaseLockRequest struct {
	ReleaseLockRequest *ReleaseLockRequest `protobuf:"bytes,16,opt,name=release_lock_request,json=releaseLockRequest,proto3,oneof"`
}

type GrackleUpdateRequest_DeleteLockRequest struct {
	DeleteLockRequest *DeleteLockRequest `protobuf:"bytes,17,opt,name=delete_lock_request,json=deleteLockRequest,proto3,oneof"`
}

type GrackleUpdateRequest_GetLockRequest struct {
	GetLockRequest *GetLockRequest `protobuf:"bytes,18,opt,name=get_lock_request,json=getLockRequest,proto3,oneof"`
}

type GrackleUpdateRequest_RunLocksGarbageCollectionRequest struct {
	RunLocksGarbageCollectionRequest *RunLocksGarbageCollectionRequest `protobuf:"bytes,19,opt,name=run_locks_garbage_collection_request,json=runLocksGarbageCollectionRequest,proto3,oneof"`
}

type GrackleUpdateRequest_LocksDeleteNamespaceRequest struct {
	LocksDeleteNamespaceRequest *LocksDeleteNamespaceRequest `protobuf:"bytes,20,opt,name=locks_delete_namespace_request,json=locksDeleteNamespaceRequest,proto3,oneof"`
}

type GrackleUpdateRequest_CreateNamespaceRequest struct {
	CreateNamespaceRequest *CreateNamespaceRequest `protobuf:"bytes,21,opt,name=create_namespace_request,json=createNamespaceRequest,proto3,oneof"`
}

type GrackleUpdateRequest_UpdateNamespaceRequest struct {
	UpdateNamespaceRequest *UpdateNamespaceRequest `protobuf:"bytes,22,opt,name=update_namespace_request,json=updateNamespaceRequest,proto3,oneof"`
}

type GrackleUpdateRequest_DeleteNamespaceRequest struct {
	DeleteNamespaceRequest *DeleteNamespaceRequest `protobuf:"bytes,23,opt,name=delete_namespace_request,json=deleteNamespaceRequest,proto3,oneof"`
}

func (*GrackleUpdateRequest_CreateSemaphoreRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_UpdateSemaphoreRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_DeleteSemaphoreRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_AcquireSemaphoreRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_ReleaseSemaphoreRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_RunSemaphoresGarbageCollectionRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_SemaphoresDeleteNamespaceRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_CreateWaitGroupRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_DeleteWaitGroupRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_AddJobsToWaitGroupRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_CompleteJobsFromWaitGroupRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_RunWaitGroupsGarbageCollectionRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_WaitGroupsDeleteNamespaceRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_AcquireLockRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_ReleaseLockRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_DeleteLockRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_GetLockRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_RunLocksGarbageCollectionRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_LocksDeleteNamespaceRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_CreateNamespaceRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_UpdateNamespaceRequest) isGrackleUpdateRequest_Request() {}

func (*GrackleUpdateRequest_DeleteNamespaceRequest) isGrackleUpdateRequest_Request() {}

type GrackleUpdateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *x.Error               `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*GrackleUpdateResponse_CreateSemaphoreResponse
	//	*GrackleUpdateResponse_UpdateSemaphoreResponse
	//	*GrackleUpdateResponse_DeleteSemaphoreResponse
	//	*GrackleUpdateResponse_AcquireSemaphoreResponse
	//	*GrackleUpdateResponse_ReleaseSemaphoreResponse
	//	*GrackleUpdateResponse_RunSemaphoresGarbageCollectionResponse
	//	*GrackleUpdateResponse_SemaphoresDeleteNamespaceResponse
	//	*GrackleUpdateResponse_CreateWaitGroupResponse
	//	*GrackleUpdateResponse_DeleteWaitGroupResponse
	//	*GrackleUpdateResponse_AddJobsToWaitGroupResponse
	//	*GrackleUpdateResponse_CompleteJobsFromWaitGroupResponse
	//	*GrackleUpdateResponse_RunWaitGroupsGarbageCollectionResponse
	//	*GrackleUpdateResponse_WaitGroupsDeleteNamespaceResponse
	//	*GrackleUpdateResponse_AcquireLockResponse
	//	*GrackleUpdateResponse_ReleaseLockResponse
	//	*GrackleUpdateResponse_DeleteLockResponse
	//	*GrackleUpdateResponse_GetLockResponse
	//	*GrackleUpdateResponse_RunLocksGarbageCollectionResponse
	//	*GrackleUpdateResponse_LocksDeleteNamespaceResponse
	//	*GrackleUpdateResponse_CreateNamespaceResponse
	//	*GrackleUpdateResponse_UpdateNamespaceResponse
	//	*GrackleUpdateResponse_DeleteNamespaceResponse
	Response      isGrackleUpdateResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrackleUpdateResponse) Reset() {
	*x = GrackleUpdateResponse{}
	mi := &file_pkg_corepb_monstera_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrackleUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrackleUpdateResponse) ProtoMessage() {}

func (x *GrackleUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_corepb_monstera_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrackleUpdateResponse.ProtoReflect.Descriptor instead.
func (*GrackleUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_corepb_monstera_proto_rawDescGZIP(), []int{3}
}

func (x *GrackleUpdateResponse) GetError() *x.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GrackleUpdateResponse) GetResponse() isGrackleUpdateResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GrackleUpdateResponse) GetCreateSemaphoreResponse() *CreateSemaphoreResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_CreateSemaphoreResponse); ok {
			return x.CreateSemaphoreResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetUpdateSemaphoreResponse() *UpdateSemaphoreResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_UpdateSemaphoreResponse); ok {
			return x.UpdateSemaphoreResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetDeleteSemaphoreResponse() *DeleteSemaphoreResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_DeleteSemaphoreResponse); ok {
			return x.DeleteSemaphoreResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetAcquireSemaphoreResponse() *AcquireSemaphoreResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_AcquireSemaphoreResponse); ok {
			return x.AcquireSemaphoreResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetReleaseSemaphoreResponse() *ReleaseSemaphoreResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_ReleaseSemaphoreResponse); ok {
			return x.ReleaseSemaphoreResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetRunSemaphoresGarbageCollectionResponse() *RunSemaphoresGarbageCollectionResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_RunSemaphoresGarbageCollectionResponse); ok {
			return x.RunSemaphoresGarbageCollectionResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetSemaphoresDeleteNamespaceResponse() *SemaphoresDeleteNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_SemaphoresDeleteNamespaceResponse); ok {
			return x.SemaphoresDeleteNamespaceResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetCreateWaitGroupResponse() *CreateWaitGroupResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_CreateWaitGroupResponse); ok {
			return x.CreateWaitGroupResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetDeleteWaitGroupResponse() *DeleteWaitGroupResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_DeleteWaitGroupResponse); ok {
			return x.DeleteWaitGroupResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetAddJobsToWaitGroupResponse() *AddJobsToWaitGroupResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_AddJobsToWaitGroupResponse); ok {
			return x.AddJobsToWaitGroupResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetCompleteJobsFromWaitGroupResponse() *CompleteJobsFromWaitGroupResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_CompleteJobsFromWaitGroupResponse); ok {
			return x.CompleteJobsFromWaitGroupResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetRunWaitGroupsGarbageCollectionResponse() *RunWaitGroupsGarbageCollectionResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_RunWaitGroupsGarbageCollectionResponse); ok {
			return x.RunWaitGroupsGarbageCollectionResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetWaitGroupsDeleteNamespaceResponse() *WaitGroupsDeleteNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_WaitGroupsDeleteNamespaceResponse); ok {
			return x.WaitGroupsDeleteNamespaceResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetAcquireLockResponse() *AcquireLockResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_AcquireLockResponse); ok {
			return x.AcquireLockResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetReleaseLockResponse() *ReleaseLockResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_ReleaseLockResponse); ok {
			return x.ReleaseLockResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetDeleteLockResponse() *DeleteLockResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_DeleteLockResponse); ok {
			return x.DeleteLockResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetGetLockResponse() *GetLockResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_GetLockResponse); ok {
			return x.GetLockResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetRunLocksGarbageCollectionResponse() *RunLocksGarbageCollectionResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_RunLocksGarbageCollectionResponse); ok {
			return x.RunLocksGarbageCollectionResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetLocksDeleteNamespaceResponse() *LocksDeleteNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_LocksDeleteNamespaceResponse); ok {
			return x.LocksDeleteNamespaceResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetCreateNamespaceResponse() *CreateNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_CreateNamespaceResponse); ok {
			return x.CreateNamespaceResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetUpdateNamespaceResponse() *UpdateNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_UpdateNamespaceResponse); ok {
			return x.UpdateNamespaceResponse
		}
	}
	return nil
}

func (x *GrackleUpdateResponse) GetDeleteNamespaceResponse() *DeleteNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*GrackleUpdateResponse_DeleteNamespaceResponse); ok {
			return x.DeleteNamespaceResponse
		}
	}
	return nil
}

type isGrackleUpdateResponse_Response interface {
	isGrackleUpdateResponse_Response()
}

type GrackleUpdateResponse_CreateSemaphoreResponse struct {
	CreateSemaphoreResponse *CreateSemaphoreResponse `protobuf:"bytes,2,opt,name=create_semaphore_response,json=createSemaphoreResponse,proto3,oneof"`
}

type GrackleUpdateResponse_UpdateSemaphoreResponse struct {
	UpdateSemaphoreResponse *UpdateSemaphoreResponse `protobuf:"bytes,3,opt,name=update_semaphore_response,json=updateSemaphoreResponse,proto3,oneof"`
}

type GrackleUpdateResponse_DeleteSemaphoreResponse struct {
	DeleteSemaphoreResponse *DeleteSemaphoreResponse `protobuf:"bytes,4,opt,name=delete_semaphore_response,json=deleteSemaphoreResponse,proto3,oneof"`
}

type GrackleUpdateResponse_AcquireSemaphoreResponse struct {
	AcquireSemaphoreResponse *AcquireSemaphoreResponse `protobuf:"bytes,5,opt,name=acquire_semaphore_response,json=acquireSemaphoreResponse,proto3,oneof"`
}

type GrackleUpdateResponse_ReleaseSemaphoreResponse struct {
	ReleaseSemaphoreResponse *ReleaseSemaphoreResponse `protobuf:"bytes,6,opt,name=release_semaphore_response,json=releaseSemaphoreResponse,proto3,oneof"`
}

type GrackleUpdateResponse_RunSemaphoresGarbageCollectionResponse struct {
	RunSemaphoresGarbageCollectionResponse *RunSemaphoresGarbageCollectionResponse `protobuf:"bytes,7,opt,name=run_semaphores_garbage_collection_response,json=runSemaphoresGarbageCollectionResponse,proto3,oneof"`
}

type GrackleUpdateResponse_SemaphoresDeleteNamespaceResponse struct {
	SemaphoresDeleteNamespaceResponse *SemaphoresDeleteNamespaceResponse `protobuf:"bytes,8,opt,name=semaphores_delete_namespace_response,json=semaphoresDeleteNamespaceResponse,proto3,oneof"`
}

type GrackleUpdateResponse_CreateWaitGroupResponse struct {
	CreateWaitGroupResponse *CreateWaitGroupResponse `protobuf:"bytes,9,opt,name=create_wait_group_response,json=createWaitGroupResponse,proto3,oneof"`
}

type GrackleUpdateResponse_DeleteWaitGroupResponse struct {
	DeleteWaitGroupResponse *DeleteWaitGroupResponse `protobuf:"bytes,10,opt,name=delete_wait_group_response,json=deleteWaitGroupResponse,proto3,oneof"`
}

type GrackleUpdateResponse_AddJobsToWaitGroupResponse struct {
	AddJobsToWaitGroupResponse *AddJobsToWaitGroupResponse `protobuf:"bytes,11,opt,name=add_jobs_to_wait_group_response,json=addJobsToWaitGroupResponse,proto3,oneof"`
}

type GrackleUpdateResponse_CompleteJobsFromWaitGroupResponse struct {
	CompleteJobsFromWaitGroupResponse *CompleteJobsFromWaitGroupResponse `protobuf:"bytes,12,opt,name=complete_jobs_from_wait_group_response,json=completeJobsFromWaitGroupResponse,proto3,oneof"`
}

type GrackleUpdateResponse_RunWaitGroupsGarbageCollectionResponse struct {
	RunWaitGroupsGarbageCollectionResponse *RunWaitGroupsGarbageCollectionResponse `protobuf:"bytes,13,opt,name=run_wait_groups_garbage_collection_response,json=runWaitGroupsGarbageCollectionResponse,proto3,oneof"`
}

type GrackleUpdateResponse_WaitGroupsDeleteNamespaceResponse struct {
	WaitGroupsDeleteNamespaceResponse *WaitGroupsDeleteNamespaceResponse `protobuf:"bytes,14,opt,name=wait_groups_delete_namespace_response,json=waitGroupsDeleteNamespaceResponse,proto3,oneof"`
}

type GrackleUpdateResponse_AcquireLockResponse struct {
	AcquireLockResponse *AcquireLockResponse `protobuf:"bytes,15,opt,name=acquire_lock_response,json=acquireLockResponse,proto3,oneof"`
}

type GrackleUpdateResponse_ReleaseLockResponse struct {
	ReleaseLockResponse *ReleaseLockResponse `protobuf:"bytes,16,opt,name=release_lock_response,json=releaseLockResponse,proto3,oneof"`
}

type GrackleUpdateResponse_DeleteLockResponse struct {
	DeleteLockResponse *DeleteLockResponse `protobuf:"bytes,17,opt,name=delete_lock_response,json=deleteLockResponse,proto3,oneof"`
}

type GrackleUpdateResponse_GetLockResponse struct {
	GetLockResponse *GetLockResponse `protobuf:"bytes,18,opt,name=get_lock_response,json=getLockResponse,proto3,oneof"`
}

type GrackleUpdateResponse_RunLocksGarbageCollectionResponse struct {
	RunLocksGarbageCollectionResponse *RunLocksGarbageCollectionResponse `protobuf:"bytes,19,opt,name=run_locks_garbage_collection_response,json=runLocksGarbageCollectionResponse,proto3,oneof"`
}

type GrackleUpdateResponse_LocksDeleteNamespaceResponse struct {
	LocksDeleteNamespaceResponse *LocksDeleteNamespaceResponse `protobuf:"bytes,20,opt,name=locks_delete_namespace_response,json=locksDeleteNamespaceResponse,proto3,oneof"`
}

type GrackleUpdateResponse_CreateNamespaceResponse struct {
	CreateNamespaceResponse *CreateNamespaceResponse `protobuf:"bytes,21,opt,name=create_namespace_response,json=createNamespaceResponse,proto3,oneof"`
}

type GrackleUpdateResponse_UpdateNamespaceResponse struct {
	UpdateNamespaceResponse *UpdateNamespaceResponse `protobuf:"bytes,22,opt,name=update_namespace_response,json=updateNamespaceResponse,proto3,oneof"`
}

type GrackleUpdateResponse_DeleteNamespaceResponse struct {
	DeleteNamespaceResponse *DeleteNamespaceResponse `protobuf:"bytes,23,opt,name=delete_namespace_response,json=deleteNamespaceResponse,proto3,oneof"`
}

func (*GrackleUpdateResponse_CreateSemaphoreResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_UpdateSemaphoreResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_DeleteSemaphoreResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_AcquireSemaphoreResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_ReleaseSemaphoreResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_RunSemaphoresGarbageCollectionResponse) isGrackleUpdateResponse_Response() {
}

func (*GrackleUpdateResponse_SemaphoresDeleteNamespaceResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_CreateWaitGroupResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_DeleteWaitGroupResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_AddJobsToWaitGroupResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_CompleteJobsFromWaitGroupResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_RunWaitGroupsGarbageCollectionResponse) isGrackleUpdateResponse_Response() {
}

func (*GrackleUpdateResponse_WaitGroupsDeleteNamespaceResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_AcquireLockResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_ReleaseLockResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_DeleteLockResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_GetLockResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_RunLocksGarbageCollectionResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_LocksDeleteNamespaceResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_CreateNamespaceResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_UpdateNamespaceResponse) isGrackleUpdateResponse_Response() {}

func (*GrackleUpdateResponse_DeleteNamespaceResponse) isGrackleUpdateResponse_Response() {}

var File_pkg_corepb_monstera_proto protoreflect.FileDescriptor

const file_pkg_corepb_monstera_proto_rawDesc = "" +
	"\n" +
	"\x19pkg/corepb/monstera.proto\x12\x19com.evrblk.grackle.corepb\x1a\x16pkg/corepb/locks.proto\x1a\x1bpkg/corepb/namespaces.proto\x1a\x1bpkg/corepb/semaphores.proto\x1a\x1cpkg/corepb/wait_groups.proto\x1a\x0ex/errors.proto\"\xfa\x05\n" +
	"\x12GrackleReadRequest\x12d\n" +
	"\x15get_semaphore_request\x18\x02 \x01(\v2..com.evrblk.grackle.corepb.GetSemaphoreRequestH\x00R\x13getSemaphoreRequest\x12j\n" +
	"\x17list_semaphores_request\x18\x03 \x01(\v20.com.evrblk.grackle.corepb.ListSemaphoresRequestH\x00R\x15listSemaphoresRequest\x12e\n" +
	"\x16get_wait_group_request\x18\x04 \x01(\v2..com.evrblk.grackle.corepb.GetWaitGroupRequestH\x00R\x13getWaitGroupRequest\x12k\n" +
	"\x18list_wait_groups_request\x18\x05 \x01(\v20.com.evrblk.grackle.corepb.ListWaitGroupsRequestH\x00R\x15listWaitGroupsRequest\x12d\n" +
	"\x15get_namespace_request\x18\x06 \x01(\v2..com.evrblk.grackle.corepb.GetNamespaceRequestH\x00R\x13getNamespaceRequest\x12j\n" +
	"\x17list_namespaces_request\x18\a \x01(\v20.com.evrblk.grackle.corepb.ListNamespacesRequestH\x00R\x15listNamespacesRequest\x12[\n" +
	"\x12list_locks_request\x18\b \x01(\v2+.com.evrblk.grackle.corepb.ListLocksRequestH\x00R\x10listLocksRequestB\t\n" +
	"\arequestJ\x04\b\x01\x10\x02\"\xc7\x06\n" +
	"\x13GrackleReadResponse\x12:\n" +
	"\x05error\x18\x01 \x01(\v2$.com.evrblk.monstera.monsterax.ErrorR\x05error\x12g\n" +
	"\x16get_semaphore_response\x18\x02 \x01(\v2/.com.evrblk.grackle.corepb.GetSemaphoreResponseH\x00R\x14getSemaphoreResponse\x12m\n" +
	"\x18list_semaphores_response\x18\x03 \x01(\v21.com.evrblk.grackle.corepb.ListSemaphoresResponseH\x00R\x16listSemaphoresResponse\x12h\n" +
	"\x17get_wait_group_response\x18\x04 \x01(\v2/.com.evrblk.grackle.corepb.GetWaitGroupResponseH\x00R\x14getWaitGroupResponse\x12n\n" +
	"\x19list_wait_groups_response\x18\x05 \x01(\v21.com.evrblk.grackle.corepb.ListWaitGroupsResponseH\x00R\x16listWaitGroupsResponse\x12g\n" +
	"\x16get_namespace_response\x18\x06 \x01(\v2/.com.evrblk.grackle.corepb.GetNamespaceResponseH\x00R\x14getNamespaceResponse\x12m\n" +
	"\x18list_namespaces_response\x18\a \x01(\v21.com.evrblk.grackle.corepb.ListNamespacesResponseH\x00R\x16listNamespacesResponse\x12^\n" +
	"\x13list_locks_response\x18\b \x01(\v2,.com.evrblk.grackle.corepb.ListLocksResponseH\x00R\x11listLocksResponseB\n" +
	"\n" +
	"\bresponse\"\xfb\x14\n" +
	"\x14GrackleUpdateRequest\x12m\n" +
	"\x18create_semaphore_request\x18\x02 \x01(\v21.com.evrblk.grackle.corepb.CreateSemaphoreRequestH\x00R\x16createSemaphoreRequest\x12m\n" +
	"\x18update_semaphore_request\x18\x03 \x01(\v21.com.evrblk.grackle.corepb.UpdateSemaphoreRequestH\x00R\x16updateSemaphoreRequest\x12m\n" +
	"\x18delete_semaphore_request\x18\x04 \x01(\v21.com.evrblk.grackle.corepb.DeleteSemaphoreRequestH\x00R\x16deleteSemaphoreRequest\x12p\n" +
	"\x19acquire_semaphore_request\x18\x05 \x01(\v22.com.evrblk.grackle.corepb.AcquireSemaphoreRequestH\x00R\x17acquireSemaphoreRequest\x12p\n" +
	"\x19release_semaphore_request\x18\x06 \x01(\v22.com.evrblk.grackle.corepb.ReleaseSemaphoreRequestH\x00R\x17releaseSemaphoreRequest\x12\x9c\x01\n" +
	")run_semaphores_garbage_collection_request\x18\a \x01(\v2@.com.evrblk.grackle.corepb.RunSemaphoresGarbageCollectionRequestH\x00R%runSemaphoresGarbageCollectionRequest\x12\x8c\x01\n" +
	"#semaphores_delete_namespace_request\x18\b \x01(\v2;.com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceRequestH\x00R semaphoresDeleteNamespaceRequest\x12n\n" +
	"\x19create_wait_group_request\x18\t \x01(\v21.com.evrblk.grackle.corepb.CreateWaitGroupRequestH\x00R\x16createWaitGroupRequest\x12n\n" +
	"\x19delete_wait_group_request\x18\n" +
	" \x01(\v21.com.evrblk.grackle.corepb.DeleteWaitGroupRequestH\x00R\x16deleteWaitGroupRequest\x12y\n" +
	"\x1eadd_jobs_to_wait_group_request\x18\v \x01(\v24.com.evrblk.grackle.corepb.AddJobsToWaitGroupRequestH\x00R\x19addJobsToWaitGroupRequest\x12\x8e\x01\n" +
	"%complete_jobs_from_wait_group_request\x18\f \x01(\v2;.com.evrblk.grackle.corepb.CompleteJobsFromWaitGroupRequestH\x00R completeJobsFromWaitGroupRequest\x12\x9d\x01\n" +
	"*run_wait_groups_garbage_collection_request\x18\r \x01(\v2@.com.evrblk.grackle.corepb.RunWaitGroupsGarbageCollectionRequestH\x00R%runWaitGroupsGarbageCollectionRequest\x12\x8d\x01\n" +
	"$wait_groups_delete_namespace_request\x18\x0e \x01(\v2;.com.evrblk.grackle.corepb.WaitGroupsDeleteNamespaceRequestH\x00R waitGroupsDeleteNamespaceRequest\x12a\n" +
	"\x14acquire_lock_request\x18\x0f \x01(\v2-.com.evrblk.grackle.corepb.AcquireLockRequestH\x00R\x12acquireLockRequest\x12a\n" +
	"\x14release_lock_request\x18\x10 \x01(\v2-.com.evrblk.grackle.corepb.ReleaseLockRequestH\x00R\x12releaseLockRequest\x12^\n" +
	"\x13delete_lock_request\x18\x11 \x01(\v2,.com.evrblk.grackle.corepb.DeleteLockRequestH\x00R\x11deleteLockRequest\x12U\n" +
	"\x10get_lock_request\x18\x12 \x01(\v2).com.evrblk.grackle.corepb.GetLockRequestH\x00R\x0egetLockRequest\x12\x8d\x01\n" +
	"$run_locks_garbage_collection_request\x18\x13 \x01(\v2;.com.evrblk.grackle.corepb.RunLocksGarbageCollectionRequestH\x00R runLocksGarbageCollectionRequest\x12}\n" +
	"\x1elocks_delete_namespace_request\x18\x14 \x01(\v26.com.evrblk.grackle.corepb.LocksDeleteNamespaceRequestH\x00R\x1blocksDeleteNamespaceRequest\x12m\n" +
	"\x18create_namespace_request\x18\x15 \x01(\v21.com.evrblk.grackle.corepb.CreateNamespaceRequestH\x00R\x16createNamespaceRequest\x12m\n" +
	"\x18update_namespace_request\x18\x16 \x01(\v21.com.evrblk.grackle.corepb.UpdateNamespaceRequestH\x00R\x16updateNamespaceRequest\x12m\n" +
	"\x18delete_namespace_request\x18\x17 \x01(\v21.com.evrblk.grackle.corepb.DeleteNamespaceRequestH\x00R\x16deleteNamespaceRequestB\t\n" +
	"\arequestJ\x04\b\x01\x10\x02\"\xf6\x15\n" +
	"\x15GrackleUpdateResponse\x12:\n" +
	"\x05error\x18\x01 \x01(\v2$.com.evrblk.monstera.monsterax.ErrorR\x05error\x12p\n" +
	"\x19create_semaphore_response\x18\x02 \x01(\v22.com.evrblk.grackle.corepb.CreateSemaphoreResponseH\x00R\x17createSemaphoreResponse\x12p\n" +
	"\x19update_semaphore_response\x18\x03 \x01(\v22.com.evrblk.grackle.corepb.UpdateSemaphoreResponseH\x00R\x17updateSemaphoreResponse\x12p\n" +
	"\x19delete_semaphore_response\x18\x04 \x01(\v22.com.evrblk.grackle.corepb.DeleteSemaphoreResponseH\x00R\x17deleteSemaphoreResponse\x12s\n" +
	"\x1aacquire_semaphore_response\x18\x05 \x01(\v23.com.evrblk.grackle.corepb.AcquireSemaphoreResponseH\x00R\x18acquireSemaphoreResponse\x12s\n" +
	"\x1arelease_semaphore_response\x18\x06 \x01(\v23.com.evrblk.grackle.corepb.ReleaseSemaphoreResponseH\x00R\x18releaseSemaphoreResponse\x12\x9f\x01\n" +
	"*run_semaphores_garbage_collection_response\x18\a \x01(\v2A.com.evrblk.grackle.corepb.RunSemaphoresGarbageCollectionResponseH\x00R&runSemaphoresGarbageCollectionResponse\x12\x8f\x01\n" +
	"$semaphores_delete_namespace_response\x18\b \x01(\v2<.com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceResponseH\x00R!semaphoresDeleteNamespaceResponse\x12q\n" +
	"\x1acreate_wait_group_response\x18\t \x01(\v22.com.evrblk.grackle.corepb.CreateWaitGroupResponseH\x00R\x17createWaitGroupResponse\x12q\n" +
	"\x1adelete_wait_group_response\x18\n" +
	" \x01(\v22.com.evrblk.grackle.corepb.DeleteWaitGroupResponseH\x00R\x17deleteWaitGroupResponse\x12|\n" +
	"\x1fadd_jobs_to_wait_group_response\x18\v \x01(\v25.com.evrblk.grackle.corepb.AddJobsToWaitGroupResponseH\x00R\x1aaddJobsToWaitGroupResponse\x12\x91\x01\n" +
	"&complete_jobs_from_wait_group_response\x18\f \x01(\v2<.com.evrblk.grackle.corepb.CompleteJobsFromWaitGroupResponseH\x00R!completeJobsFromWaitGroupResponse\x12\xa0\x01\n" +
	"+run_wait_groups_garbage_collection_response\x18\r \x01(\v2A.com.evrblk.grackle.corepb.RunWaitGroupsGarbageCollectionResponseH\x00R&runWaitGroupsGarbageCollectionResponse\x12\x90\x01\n" +
	"%wait_groups_delete_namespace_response\x18\x0e \x01(\v2<.com.evrblk.grackle.corepb.WaitGroupsDeleteNamespaceResponseH\x00R!waitGroupsDeleteNamespaceResponse\x12d\n" +
	"\x15acquire_lock_response\x18\x0f \x01(\v2..com.evrblk.grackle.corepb.AcquireLockResponseH\x00R\x13acquireLockResponse\x12d\n" +
	"\x15release_lock_response\x18\x10 \x01(\v2..com.evrblk.grackle.corepb.ReleaseLockResponseH\x00R\x13releaseLockResponse\x12a\n" +
	"\x14delete_lock_response\x18\x11 \x01(\v2-.com.evrblk.grackle.corepb.DeleteLockResponseH\x00R\x12deleteLockResponse\x12X\n" +
	"\x11get_lock_response\x18\x12 \x01(\v2*.com.evrblk.grackle.corepb.GetLockResponseH\x00R\x0fgetLockResponse\x12\x90\x01\n" +
	"%run_locks_garbage_collection_response\x18\x13 \x01(\v2<.com.evrblk.grackle.corepb.RunLocksGarbageCollectionResponseH\x00R!runLocksGarbageCollectionResponse\x12\x80\x01\n" +
	"\x1flocks_delete_namespace_response\x18\x14 \x01(\v27.com.evrblk.grackle.corepb.LocksDeleteNamespaceResponseH\x00R\x1clocksDeleteNamespaceResponse\x12p\n" +
	"\x19create_namespace_response\x18\x15 \x01(\v22.com.evrblk.grackle.corepb.CreateNamespaceResponseH\x00R\x17createNamespaceResponse\x12p\n" +
	"\x19update_namespace_response\x18\x16 \x01(\v22.com.evrblk.grackle.corepb.UpdateNamespaceResponseH\x00R\x17updateNamespaceResponse\x12p\n" +
	"\x19delete_namespace_response\x18\x17 \x01(\v22.com.evrblk.grackle.corepb.DeleteNamespaceResponseH\x00R\x17deleteNamespaceResponseB\n" +
	"\n" +
	"\bresponseB&Z$github.com/evrblk/grackle/pkg/corepbb\x06proto3"

var (
	file_pkg_corepb_monstera_proto_rawDescOnce sync.Once
	file_pkg_corepb_monstera_proto_rawDescData []byte
)

func file_pkg_corepb_monstera_proto_rawDescGZIP() []byte {
	file_pkg_corepb_monstera_proto_rawDescOnce.Do(func() {
		file_pkg_corepb_monstera_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_corepb_monstera_proto_rawDesc), len(file_pkg_corepb_monstera_proto_rawDesc)))
	})
	return file_pkg_corepb_monstera_proto_rawDescData
}

var file_pkg_corepb_monstera_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_corepb_monstera_proto_goTypes = []any{
	(*GrackleReadRequest)(nil),                     // 0: com.evrblk.grackle.corepb.GrackleReadRequest
	(*GrackleReadResponse)(nil),                    // 1: com.evrblk.grackle.corepb.GrackleReadResponse
	(*GrackleUpdateRequest)(nil),                   // 2: com.evrblk.grackle.corepb.GrackleUpdateRequest
	(*GrackleUpdateResponse)(nil),                  // 3: com.evrblk.grackle.corepb.GrackleUpdateResponse
	(*GetSemaphoreRequest)(nil),                    // 4: com.evrblk.grackle.corepb.GetSemaphoreRequest
	(*ListSemaphoresRequest)(nil),                  // 5: com.evrblk.grackle.corepb.ListSemaphoresRequest
	(*GetWaitGroupRequest)(nil),                    // 6: com.evrblk.grackle.corepb.GetWaitGroupRequest
	(*ListWaitGroupsRequest)(nil),                  // 7: com.evrblk.grackle.corepb.ListWaitGroupsRequest
	(*GetNamespaceRequest)(nil),                    // 8: com.evrblk.grackle.corepb.GetNamespaceRequest
	(*ListNamespacesRequest)(nil),                  // 9: com.evrblk.grackle.corepb.ListNamespacesRequest
	(*ListLocksRequest)(nil),                       // 10: com.evrblk.grackle.corepb.ListLocksRequest
	(*x.Error)(nil),                                // 11: com.evrblk.monstera.monsterax.Error
	(*GetSemaphoreResponse)(nil),                   // 12: com.evrblk.grackle.corepb.GetSemaphoreResponse
	(*ListSemaphoresResponse)(nil),                 // 13: com.evrblk.grackle.corepb.ListSemaphoresResponse
	(*GetWaitGroupResponse)(nil),                   // 14: com.evrblk.grackle.corepb.GetWaitGroupResponse
	(*ListWaitGroupsResponse)(nil),                 // 15: com.evrblk.grackle.corepb.ListWaitGroupsResponse
	(*GetNamespaceResponse)(nil),                   // 16: com.evrblk.grackle.corepb.GetNamespaceResponse
	(*ListNamespacesResponse)(nil),                 // 17: com.evrblk.grackle.corepb.ListNamespacesResponse
	(*ListLocksResponse)(nil),                      // 18: com.evrblk.grackle.corepb.ListLocksResponse
	(*CreateSemaphoreRequest)(nil),                 // 19: com.evrblk.grackle.corepb.CreateSemaphoreRequest
	(*UpdateSemaphoreRequest)(nil),                 // 20: com.evrblk.grackle.corepb.UpdateSemaphoreRequest
	(*DeleteSemaphoreRequest)(nil),                 // 21: com.evrblk.grackle.corepb.DeleteSemaphoreRequest
	(*AcquireSemaphoreRequest)(nil),                // 22: com.evrblk.grackle.corepb.AcquireSemaphoreRequest
	(*ReleaseSemaphoreRequest)(nil),                // 23: com.evrblk.grackle.corepb.ReleaseSemaphoreRequest
	(*RunSemaphoresGarbageCollectionRequest)(nil),  // 24: com.evrblk.grackle.corepb.RunSemaphoresGarbageCollectionRequest
	(*SemaphoresDeleteNamespaceRequest)(nil),       // 25: com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceRequest
	(*CreateWaitGroupRequest)(nil),                 // 26: com.evrblk.grackle.corepb.CreateWaitGroupRequest
	(*DeleteWaitGroupRequest)(nil),                 // 27: com.evrblk.grackle.corepb.DeleteWaitGroupRequest
	(*AddJobsToWaitGroupRequest)(nil),              // 28: com.evrblk.grackle.corepb.AddJobsToWaitGroupRequest
	(*CompleteJobsFromWaitGroupRequest)(nil),       // 29: com.evrblk.grackle.corepb.CompleteJobsFromWaitGroupRequest
	(*RunWaitGroupsGarbageCollectionRequest)(nil),  // 30: com.evrblk.grackle.corepb.RunWaitGroupsGarbageCollectionRequest
	(*WaitGroupsDeleteNamespaceRequest)(nil),       // 31: com.evrblk.grackle.corepb.WaitGroupsDeleteNamespaceRequest
	(*AcquireLockRequest)(nil),                     // 32: com.evrblk.grackle.corepb.AcquireLockRequest
	(*ReleaseLockRequest)(nil),                     // 33: com.evrblk.grackle.corepb.ReleaseLockRequest
	(*DeleteLockRequest)(nil),                      // 34: com.evrblk.grackle.corepb.DeleteLockRequest
	(*GetLockRequest)(nil),                         // 35: com.evrblk.grackle.corepb.GetLockRequest
	(*RunLocksGarbageCollectionRequest)(nil),       // 36: com.evrblk.grackle.corepb.RunLocksGarbageCollectionRequest
	(*LocksDeleteNamespaceRequest)(nil),            // 37: com.evrblk.grackle.corepb.LocksDeleteNamespaceRequest
	(*CreateNamespaceRequest)(nil),                 // 38: com.evrblk.grackle.corepb.CreateNamespaceRequest
	(*UpdateNamespaceRequest)(nil),                 // 39: com.evrblk.grackle.corepb.UpdateNamespaceRequest
	(*DeleteNamespaceRequest)(nil),                 // 40: com.evrblk.grackle.corepb.DeleteNamespaceRequest
	(*CreateSemaphoreResponse)(nil),                // 41: com.evrblk.grackle.corepb.CreateSemaphoreResponse
	(*UpdateSemaphoreResponse)(nil),                // 42: com.evrblk.grackle.corepb.UpdateSemaphoreResponse
	(*DeleteSemaphoreResponse)(nil),                // 43: com.evrblk.grackle.corepb.DeleteSemaphoreResponse
	(*AcquireSemaphoreResponse)(nil),               // 44: com.evrblk.grackle.corepb.AcquireSemaphoreResponse
	(*ReleaseSemaphoreResponse)(nil),               // 45: com.evrblk.grackle.corepb.ReleaseSemaphoreResponse
	(*RunSemaphoresGarbageCollectionResponse)(nil), // 46: com.evrblk.grackle.corepb.RunSemaphoresGarbageCollectionResponse
	(*SemaphoresDeleteNamespaceResponse)(nil),      // 47: com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceResponse
	(*CreateWaitGroupResponse)(nil),                // 48: com.evrblk.grackle.corepb.CreateWaitGroupResponse
	(*DeleteWaitGroupResponse)(nil),                // 49: com.evrblk.grackle.corepb.DeleteWaitGroupResponse
	(*AddJobsToWaitGroupResponse)(nil),             // 50: com.evrblk.grackle.corepb.AddJobsToWaitGroupResponse
	(*CompleteJobsFromWaitGroupResponse)(nil),      // 51: com.evrblk.grackle.corepb.CompleteJobsFromWaitGroupResponse
	(*RunWaitGroupsGarbageCollectionResponse)(nil), // 52: com.evrblk.grackle.corepb.RunWaitGroupsGarbageCollectionResponse
	(*WaitGroupsDeleteNamespaceResponse)(nil),      // 53: com.evrblk.grackle.corepb.WaitGroupsDeleteNamespaceResponse
	(*AcquireLockResponse)(nil),                    // 54: com.evrblk.grackle.corepb.AcquireLockResponse
	(*ReleaseLockResponse)(nil),                    // 55: com.evrblk.grackle.corepb.ReleaseLockResponse
	(*DeleteLockResponse)(nil),                     // 56: com.evrblk.grackle.corepb.DeleteLockResponse
	(*GetLockResponse)(nil),                        // 57: com.evrblk.grackle.corepb.GetLockResponse
	(*RunLocksGarbageCollectionResponse)(nil),      // 58: com.evrblk.grackle.corepb.RunLocksGarbageCollectionResponse
	(*LocksDeleteNamespaceResponse)(nil),           // 59: com.evrblk.grackle.corepb.LocksDeleteNamespaceResponse
	(*CreateNamespaceResponse)(nil),                // 60: com.evrblk.grackle.corepb.CreateNamespaceResponse
	(*UpdateNamespaceResponse)(nil),                // 61: com.evrblk.grackle.corepb.UpdateNamespaceResponse
	(*DeleteNamespaceResponse)(nil),                // 62: com.evrblk.grackle.corepb.DeleteNamespaceResponse
}
var file_pkg_corepb_monstera_proto_depIdxs = []int32{
	4,  // 0: com.evrblk.grackle.corepb.GrackleReadRequest.get_semaphore_request:type_name -> com.evrblk.grackle.corepb.GetSemaphoreRequest
	5,  // 1: com.evrblk.grackle.corepb.GrackleReadRequest.list_semaphores_request:type_name -> com.evrblk.grackle.corepb.ListSemaphoresRequest
	6,  // 2: com.evrblk.grackle.corepb.GrackleReadRequest.get_wait_group_request:type_name -> com.evrblk.grackle.corepb.GetWaitGroupRequest
	7,  // 3: com.evrblk.grackle.corepb.GrackleReadRequest.list_wait_groups_request:type_name -> com.evrblk.grackle.corepb.ListWaitGroupsRequest
	8,  // 4: com.evrblk.grackle.corepb.GrackleReadRequest.get_namespace_request:type_name -> com.evrblk.grackle.corepb.GetNamespaceRequest
	9,  // 5: com.evrblk.grackle.corepb.GrackleReadRequest.list_namespaces_request:type_name -> com.evrblk.grackle.corepb.ListNamespacesRequest
	10, // 6: com.evrblk.grackle.corepb.GrackleReadRequest.list_locks_request:type_name -> com.evrblk.grackle.corepb.ListLocksRequest
	11, // 7: com.evrblk.grackle.corepb.GrackleReadResponse.error:type_name -> com.evrblk.monstera.monsterax.Error
	12, // 8: com.evrblk.grackle.corepb.GrackleReadResponse.get_semaphore_response:type_name -> com.evrblk.grackle.corepb.GetSemaphoreResponse
	13, // 9: com.evrblk.grackle.corepb.GrackleReadResponse.list_semaphores_response:type_name -> com.evrblk.grackle.corepb.ListSemaphoresResponse
	14, // 10: com.evrblk.grackle.corepb.GrackleReadResponse.get_wait_group_response:type_name -> com.evrblk.grackle.corepb.GetWaitGroupResponse
	15, // 11: com.evrblk.grackle.corepb.GrackleReadResponse.list_wait_groups_response:type_name -> com.evrblk.grackle.corepb.ListWaitGroupsResponse
	16, // 12: com.evrblk.grackle.corepb.GrackleReadResponse.get_namespace_response:type_name -> com.evrblk.grackle.corepb.GetNamespaceResponse
	17, // 13: com.evrblk.grackle.corepb.GrackleReadResponse.list_namespaces_response:type_name -> com.evrblk.grackle.corepb.ListNamespacesResponse
	18, // 14: com.evrblk.grackle.corepb.GrackleReadResponse.list_locks_response:type_name -> com.evrblk.grackle.corepb.ListLocksResponse
	19, // 15: com.evrblk.grackle.corepb.GrackleUpdateRequest.create_semaphore_request:type_name -> com.evrblk.grackle.corepb.CreateSemaphoreRequest
	20, // 16: com.evrblk.grackle.corepb.GrackleUpdateRequest.update_semaphore_request:type_name -> com.evrblk.grackle.corepb.UpdateSemaphoreRequest
	21, // 17: com.evrblk.grackle.corepb.GrackleUpdateRequest.delete_semaphore_request:type_name -> com.evrblk.grackle.corepb.DeleteSemaphoreRequest
	22, // 18: com.evrblk.grackle.corepb.GrackleUpdateRequest.acquire_semaphore_request:type_name -> com.evrblk.grackle.corepb.AcquireSemaphoreRequest
	23, // 19: com.evrblk.grackle.corepb.GrackleUpdateRequest.release_semaphore_request:type_name -> com.evrblk.grackle.corepb.ReleaseSemaphoreRequest
	24, // 20: com.evrblk.grackle.corepb.GrackleUpdateRequest.run_semaphores_garbage_collection_request:type_name -> com.evrblk.grackle.corepb.RunSemaphoresGarbageCollectionRequest
	25, // 21: com.evrblk.grackle.corepb.GrackleUpdateRequest.semaphores_delete_namespace_request:type_name -> com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceRequest
	26, // 22: com.evrblk.grackle.corepb.GrackleUpdateRequest.create_wait_group_request:type_name -> com.evrblk.grackle.corepb.CreateWaitGroupRequest
	27, // 23: com.evrblk.grackle.corepb.GrackleUpdateRequest.delete_wait_group_request:type_name -> com.evrblk.grackle.corepb.DeleteWaitGroupRequest
	28, // 24: com.evrblk.grackle.corepb.GrackleUpdateRequest.add_jobs_to_wait_group_request:type_name -> com.evrblk.grackle.corepb.AddJobsToWaitGroupRequest
	29, // 25: com.evrblk.grackle.corepb.GrackleUpdateRequest.complete_jobs_from_wait_group_request:type_name -> com.evrblk.grackle.corepb.CompleteJobsFromWaitGroupRequest
	30, // 26: com.evrblk.grackle.corepb.GrackleUpdateRequest.run_wait_groups_garbage_collection_request:type_name -> com.evrblk.grackle.corepb.RunWaitGroupsGarbageCollectionRequest
	31, // 27: com.evrblk.grackle.corepb.GrackleUpdateRequest.wait_groups_delete_namespace_request:type_name -> com.evrblk.grackle.corepb.WaitGroupsDeleteNamespaceRequest
	32, // 28: com.evrblk.grackle.corepb.GrackleUpdateRequest.acquire_lock_request:type_name -> com.evrblk.grackle.corepb.AcquireLockRequest
	33, // 29: com.evrblk.grackle.corepb.GrackleUpdateRequest.release_lock_request:type_name -> com.evrblk.grackle.corepb.ReleaseLockRequest
	34, // 30: com.evrblk.grackle.corepb.GrackleUpdateRequest.delete_lock_request:type_name -> com.evrblk.grackle.corepb.DeleteLockRequest
	35, // 31: com.evrblk.grackle.corepb.GrackleUpdateRequest.get_lock_request:type_name -> com.evrblk.grackle.corepb.GetLockRequest
	36, // 32: com.evrblk.grackle.corepb.GrackleUpdateRequest.run_locks_garbage_collection_request:type_name -> com.evrblk.grackle.corepb.RunLocksGarbageCollectionRequest
	37, // 33: com.evrblk.grackle.corepb.GrackleUpdateRequest.locks_delete_namespace_request:type_name -> com.evrblk.grackle.corepb.LocksDeleteNamespaceRequest
	38, // 34: com.evrblk.grackle.corepb.GrackleUpdateRequest.create_namespace_request:type_name -> com.evrblk.grackle.corepb.CreateNamespaceRequest
	39, // 35: com.evrblk.grackle.corepb.GrackleUpdateRequest.update_namespace_request:type_name -> com.evrblk.grackle.corepb.UpdateNamespaceRequest
	40, // 36: com.evrblk.grackle.corepb.GrackleUpdateRequest.delete_namespace_request:type_name -> com.evrblk.grackle.corepb.DeleteNamespaceRequest
	11, // 37: com.evrblk.grackle.corepb.GrackleUpdateResponse.error:type_name -> com.evrblk.monstera.monsterax.Error
	41, // 38: com.evrblk.grackle.corepb.GrackleUpdateResponse.create_semaphore_response:type_name -> com.evrblk.grackle.corepb.CreateSemaphoreResponse
	42, // 39: com.evrblk.grackle.corepb.GrackleUpdateResponse.update_semaphore_response:type_name -> com.evrblk.grackle.corepb.UpdateSemaphoreResponse
	43, // 40: com.evrblk.grackle.corepb.GrackleUpdateResponse.delete_semaphore_response:type_name -> com.evrblk.grackle.corepb.DeleteSemaphoreResponse
	44, // 41: com.evrblk.grackle.corepb.GrackleUpdateResponse.acquire_semaphore_response:type_name -> com.evrblk.grackle.corepb.AcquireSemaphoreResponse
	45, // 42: com.evrblk.grackle.corepb.GrackleUpdateResponse.release_semaphore_response:type_name -> com.evrblk.grackle.corepb.ReleaseSemaphoreResponse
	46, // 43: com.evrblk.grackle.corepb.GrackleUpdateResponse.run_semaphores_garbage_collection_response:type_name -> com.evrblk.grackle.corepb.RunSemaphoresGarbageCollectionResponse
	47, // 44: com.evrblk.grackle.corepb.GrackleUpdateResponse.semaphores_delete_namespace_response:type_name -> com.evrblk.grackle.corepb.SemaphoresDeleteNamespaceResponse
	48, // 45: com.evrblk.grackle.corepb.GrackleUpdateResponse.create_wait_group_response:type_name -> com.evrblk.grackle.corepb.CreateWaitGroupResponse
	49, // 46: com.evrblk.grackle.corepb.GrackleUpdateResponse.delete_wait_group_response:type_name -> com.evrblk.grackle.corepb.DeleteWaitGroupResponse
	50, // 47: com.evrblk.grackle.corepb.GrackleUpdateResponse.add_jobs_to_wait_group_response:type_name -> com.evrblk.grackle.corepb.AddJobsToWaitGroupResponse
	51, // 48: com.evrblk.grackle.corepb.GrackleUpdateResponse.complete_jobs_from_wait_group_response:type_name -> com.evrblk.grackle.corepb.CompleteJobsFromWaitGroupResponse
	52, // 49: com.evrblk.grackle.corepb.GrackleUpdateResponse.run_wait_groups_garbage_collection_response:type_name -> com.evrblk.grackle.corepb.RunWaitGroupsGarbageCollectionResponse
	53, // 50: com.evrblk.grackle.corepb.GrackleUpdateResponse.wait_groups_delete_namespace_response:type_name -> com.evrblk.grackle.corepb.WaitGroupsDeleteNamespaceResponse
	54, // 51: com.evrblk.grackle.corepb.GrackleUpdateResponse.acquire_lock_response:type_name -> com.evrblk.grackle.corepb.AcquireLockResponse
	55, // 52: com.evrblk.grackle.corepb.GrackleUpdateResponse.release_lock_response:type_name -> com.evrblk.grackle.corepb.ReleaseLockResponse
	56, // 53: com.evrblk.grackle.corepb.GrackleUpdateResponse.delete_lock_response:type_name -> com.evrblk.grackle.corepb.DeleteLockResponse
	57, // 54: com.evrblk.grackle.corepb.GrackleUpdateResponse.get_lock_response:type_name -> com.evrblk.grackle.corepb.GetLockResponse
	58, // 55: com.evrblk.grackle.corepb.GrackleUpdateResponse.run_locks_garbage_collection_response:type_name -> com.evrblk.grackle.corepb.RunLocksGarbageCollectionResponse
	59, // 56: com.evrblk.grackle.corepb.GrackleUpdateResponse.locks_delete_namespace_response:type_name -> com.evrblk.grackle.corepb.LocksDeleteNamespaceResponse
	60, // 57: com.evrblk.grackle.corepb.GrackleUpdateResponse.create_namespace_response:type_name -> com.evrblk.grackle.corepb.CreateNamespaceResponse
	61, // 58: com.evrblk.grackle.corepb.GrackleUpdateResponse.update_namespace_response:type_name -> com.evrblk.grackle.corepb.UpdateNamespaceResponse
	62, // 59: com.evrblk.grackle.corepb.GrackleUpdateResponse.delete_namespace_response:type_name -> com.evrblk.grackle.corepb.DeleteNamespaceResponse
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_pkg_corepb_monstera_proto_init() }
func file_pkg_corepb_monstera_proto_init() {
	if File_pkg_corepb_monstera_proto != nil {
		return
	}
	file_pkg_corepb_locks_proto_init()
	file_pkg_corepb_namespaces_proto_init()
	file_pkg_corepb_semaphores_proto_init()
	file_pkg_corepb_wait_groups_proto_init()
	file_pkg_corepb_monstera_proto_msgTypes[0].OneofWrappers = []any{
		(*GrackleReadRequest_GetSemaphoreRequest)(nil),
		(*GrackleReadRequest_ListSemaphoresRequest)(nil),
		(*GrackleReadRequest_GetWaitGroupRequest)(nil),
		(*GrackleReadRequest_ListWaitGroupsRequest)(nil),
		(*GrackleReadRequest_GetNamespaceRequest)(nil),
		(*GrackleReadRequest_ListNamespacesRequest)(nil),
		(*GrackleReadRequest_ListLocksRequest)(nil),
	}
	file_pkg_corepb_monstera_proto_msgTypes[1].OneofWrappers = []any{
		(*GrackleReadResponse_GetSemaphoreResponse)(nil),
		(*GrackleReadResponse_ListSemaphoresResponse)(nil),
		(*GrackleReadResponse_GetWaitGroupResponse)(nil),
		(*GrackleReadResponse_ListWaitGroupsResponse)(nil),
		(*GrackleReadResponse_GetNamespaceResponse)(nil),
		(*GrackleReadResponse_ListNamespacesResponse)(nil),
		(*GrackleReadResponse_ListLocksResponse)(nil),
	}
	file_pkg_corepb_monstera_proto_msgTypes[2].OneofWrappers = []any{
		(*GrackleUpdateRequest_CreateSemaphoreRequest)(nil),
		(*GrackleUpdateRequest_UpdateSemaphoreRequest)(nil),
		(*GrackleUpdateRequest_DeleteSemaphoreRequest)(nil),
		(*GrackleUpdateRequest_AcquireSemaphoreRequest)(nil),
		(*GrackleUpdateRequest_ReleaseSemaphoreRequest)(nil),
		(*GrackleUpdateRequest_RunSemaphoresGarbageCollectionRequest)(nil),
		(*GrackleUpdateRequest_SemaphoresDeleteNamespaceRequest)(nil),
		(*GrackleUpdateRequest_CreateWaitGroupRequest)(nil),
		(*GrackleUpdateRequest_DeleteWaitGroupRequest)(nil),
		(*GrackleUpdateRequest_AddJobsToWaitGroupRequest)(nil),
		(*GrackleUpdateRequest_CompleteJobsFromWaitGroupRequest)(nil),
		(*GrackleUpdateRequest_RunWaitGroupsGarbageCollectionRequest)(nil),
		(*GrackleUpdateRequest_WaitGroupsDeleteNamespaceRequest)(nil),
		(*GrackleUpdateRequest_AcquireLockRequest)(nil),
		(*GrackleUpdateRequest_ReleaseLockRequest)(nil),
		(*GrackleUpdateRequest_DeleteLockRequest)(nil),
		(*GrackleUpdateRequest_GetLockRequest)(nil),
		(*GrackleUpdateRequest_RunLocksGarbageCollectionRequest)(nil),
		(*GrackleUpdateRequest_LocksDeleteNamespaceRequest)(nil),
		(*GrackleUpdateRequest_CreateNamespaceRequest)(nil),
		(*GrackleUpdateRequest_UpdateNamespaceRequest)(nil),
		(*GrackleUpdateRequest_DeleteNamespaceRequest)(nil),
	}
	file_pkg_corepb_monstera_proto_msgTypes[3].OneofWrappers = []any{
		(*GrackleUpdateResponse_CreateSemaphoreResponse)(nil),
		(*GrackleUpdateResponse_UpdateSemaphoreResponse)(nil),
		(*GrackleUpdateResponse_DeleteSemaphoreResponse)(nil),
		(*GrackleUpdateResponse_AcquireSemaphoreResponse)(nil),
		(*GrackleUpdateResponse_ReleaseSemaphoreResponse)(nil),
		(*GrackleUpdateResponse_RunSemaphoresGarbageCollectionResponse)(nil),
		(*GrackleUpdateResponse_SemaphoresDeleteNamespaceResponse)(nil),
		(*GrackleUpdateResponse_CreateWaitGroupResponse)(nil),
		(*GrackleUpdateResponse_DeleteWaitGroupResponse)(nil),
		(*GrackleUpdateResponse_AddJobsToWaitGroupResponse)(nil),
		(*GrackleUpdateResponse_CompleteJobsFromWaitGroupResponse)(nil),
		(*GrackleUpdateResponse_RunWaitGroupsGarbageCollectionResponse)(nil),
		(*GrackleUpdateResponse_WaitGroupsDeleteNamespaceResponse)(nil),
		(*GrackleUpdateResponse_AcquireLockResponse)(nil),
		(*GrackleUpdateResponse_ReleaseLockResponse)(nil),
		(*GrackleUpdateResponse_DeleteLockResponse)(nil),
		(*GrackleUpdateResponse_GetLockResponse)(nil),
		(*GrackleUpdateResponse_RunLocksGarbageCollectionResponse)(nil),
		(*GrackleUpdateResponse_LocksDeleteNamespaceResponse)(nil),
		(*GrackleUpdateResponse_CreateNamespaceResponse)(nil),
		(*GrackleUpdateResponse_UpdateNamespaceResponse)(nil),
		(*GrackleUpdateResponse_DeleteNamespaceResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_corepb_monstera_proto_rawDesc), len(file_pkg_corepb_monstera_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_corepb_monstera_proto_goTypes,
		DependencyIndexes: file_pkg_corepb_monstera_proto_depIdxs,
		MessageInfos:      file_pkg_corepb_monstera_proto_msgTypes,
	}.Build()
	File_pkg_corepb_monstera_proto = out.File
	file_pkg_corepb_monstera_proto_goTypes = nil
	file_pkg_corepb_monstera_proto_depIdxs = nil
}
