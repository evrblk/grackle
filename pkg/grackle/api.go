// Code generated by `monstera generate`. DO NOT EDIT.

package grackle

import (
	"context"
	corepb "github.com/evrblk/grackle/pkg/corepb"
	monstera "github.com/evrblk/monstera"
	"io"
)

type GrackleCoreApi interface {
	ListLocks(ctx context.Context, request *corepb.ListLocksRequest) (*corepb.ListLocksResponse, error)
	AcquireLock(ctx context.Context, request *corepb.AcquireLockRequest) (*corepb.AcquireLockResponse, error)
	ReleaseLock(ctx context.Context, request *corepb.ReleaseLockRequest) (*corepb.ReleaseLockResponse, error)
	DeleteLock(ctx context.Context, request *corepb.DeleteLockRequest) (*corepb.DeleteLockResponse, error)
	GetLock(ctx context.Context, request *corepb.GetLockRequest) (*corepb.GetLockResponse, error)
	RunLocksGarbageCollection(ctx context.Context, request *corepb.RunLocksGarbageCollectionRequest, shardId string) (*corepb.RunLocksGarbageCollectionResponse, error)
	LocksDeleteNamespace(ctx context.Context, request *corepb.LocksDeleteNamespaceRequest) (*corepb.LocksDeleteNamespaceResponse, error)

	GetSemaphore(ctx context.Context, request *corepb.GetSemaphoreRequest) (*corepb.GetSemaphoreResponse, error)
	ListSemaphores(ctx context.Context, request *corepb.ListSemaphoresRequest) (*corepb.ListSemaphoresResponse, error)
	AcquireSemaphore(ctx context.Context, request *corepb.AcquireSemaphoreRequest) (*corepb.AcquireSemaphoreResponse, error)
	ReleaseSemaphore(ctx context.Context, request *corepb.ReleaseSemaphoreRequest) (*corepb.ReleaseSemaphoreResponse, error)
	CreateSemaphore(ctx context.Context, request *corepb.CreateSemaphoreRequest) (*corepb.CreateSemaphoreResponse, error)
	UpdateSemaphore(ctx context.Context, request *corepb.UpdateSemaphoreRequest) (*corepb.UpdateSemaphoreResponse, error)
	DeleteSemaphore(ctx context.Context, request *corepb.DeleteSemaphoreRequest) (*corepb.DeleteSemaphoreResponse, error)
	RunSemaphoresGarbageCollection(ctx context.Context, request *corepb.RunSemaphoresGarbageCollectionRequest, shardId string) (*corepb.RunSemaphoresGarbageCollectionResponse, error)
	SemaphoresDeleteNamespace(ctx context.Context, request *corepb.SemaphoresDeleteNamespaceRequest) (*corepb.SemaphoresDeleteNamespaceResponse, error)

	GetNamespace(ctx context.Context, request *corepb.GetNamespaceRequest) (*corepb.GetNamespaceResponse, error)
	ListNamespaces(ctx context.Context, request *corepb.ListNamespacesRequest) (*corepb.ListNamespacesResponse, error)
	CreateNamespace(ctx context.Context, request *corepb.CreateNamespaceRequest) (*corepb.CreateNamespaceResponse, error)
	UpdateNamespace(ctx context.Context, request *corepb.UpdateNamespaceRequest) (*corepb.UpdateNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, request *corepb.DeleteNamespaceRequest) (*corepb.DeleteNamespaceResponse, error)

	GetWaitGroup(ctx context.Context, request *corepb.GetWaitGroupRequest) (*corepb.GetWaitGroupResponse, error)
	ListWaitGroups(ctx context.Context, request *corepb.ListWaitGroupsRequest) (*corepb.ListWaitGroupsResponse, error)
	AddJobsToWaitGroup(ctx context.Context, request *corepb.AddJobsToWaitGroupRequest) (*corepb.AddJobsToWaitGroupResponse, error)
	CompleteJobsFromWaitGroup(ctx context.Context, request *corepb.CompleteJobsFromWaitGroupRequest) (*corepb.CompleteJobsFromWaitGroupResponse, error)
	CreateWaitGroup(ctx context.Context, request *corepb.CreateWaitGroupRequest) (*corepb.CreateWaitGroupResponse, error)
	DeleteWaitGroup(ctx context.Context, request *corepb.DeleteWaitGroupRequest) (*corepb.DeleteWaitGroupResponse, error)
	RunWaitGroupsGarbageCollection(ctx context.Context, request *corepb.RunWaitGroupsGarbageCollectionRequest, shardId string) (*corepb.RunWaitGroupsGarbageCollectionResponse, error)
	WaitGroupsDeleteNamespace(ctx context.Context, request *corepb.WaitGroupsDeleteNamespaceRequest) (*corepb.WaitGroupsDeleteNamespaceResponse, error)
}

var _ GrackleCoreApi = &UnimplementedGrackleCoreApi{}

type UnimplementedGrackleCoreApi struct{}

func (a *UnimplementedGrackleCoreApi) ListLocks(ctx context.Context, request *corepb.ListLocksRequest) (*corepb.ListLocksResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) AcquireLock(ctx context.Context, request *corepb.AcquireLockRequest) (*corepb.AcquireLockResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) ReleaseLock(ctx context.Context, request *corepb.ReleaseLockRequest) (*corepb.ReleaseLockResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) DeleteLock(ctx context.Context, request *corepb.DeleteLockRequest) (*corepb.DeleteLockResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) GetLock(ctx context.Context, request *corepb.GetLockRequest) (*corepb.GetLockResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) RunLocksGarbageCollection(ctx context.Context, request *corepb.RunLocksGarbageCollectionRequest, shardId string) (*corepb.RunLocksGarbageCollectionResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) LocksDeleteNamespace(ctx context.Context, request *corepb.LocksDeleteNamespaceRequest) (*corepb.LocksDeleteNamespaceResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) GetSemaphore(ctx context.Context, request *corepb.GetSemaphoreRequest) (*corepb.GetSemaphoreResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) ListSemaphores(ctx context.Context, request *corepb.ListSemaphoresRequest) (*corepb.ListSemaphoresResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) AcquireSemaphore(ctx context.Context, request *corepb.AcquireSemaphoreRequest) (*corepb.AcquireSemaphoreResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) ReleaseSemaphore(ctx context.Context, request *corepb.ReleaseSemaphoreRequest) (*corepb.ReleaseSemaphoreResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) CreateSemaphore(ctx context.Context, request *corepb.CreateSemaphoreRequest) (*corepb.CreateSemaphoreResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) UpdateSemaphore(ctx context.Context, request *corepb.UpdateSemaphoreRequest) (*corepb.UpdateSemaphoreResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) DeleteSemaphore(ctx context.Context, request *corepb.DeleteSemaphoreRequest) (*corepb.DeleteSemaphoreResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) RunSemaphoresGarbageCollection(ctx context.Context, request *corepb.RunSemaphoresGarbageCollectionRequest, shardId string) (*corepb.RunSemaphoresGarbageCollectionResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) SemaphoresDeleteNamespace(ctx context.Context, request *corepb.SemaphoresDeleteNamespaceRequest) (*corepb.SemaphoresDeleteNamespaceResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) GetNamespace(ctx context.Context, request *corepb.GetNamespaceRequest) (*corepb.GetNamespaceResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) ListNamespaces(ctx context.Context, request *corepb.ListNamespacesRequest) (*corepb.ListNamespacesResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) CreateNamespace(ctx context.Context, request *corepb.CreateNamespaceRequest) (*corepb.CreateNamespaceResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) UpdateNamespace(ctx context.Context, request *corepb.UpdateNamespaceRequest) (*corepb.UpdateNamespaceResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) DeleteNamespace(ctx context.Context, request *corepb.DeleteNamespaceRequest) (*corepb.DeleteNamespaceResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) GetWaitGroup(ctx context.Context, request *corepb.GetWaitGroupRequest) (*corepb.GetWaitGroupResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) ListWaitGroups(ctx context.Context, request *corepb.ListWaitGroupsRequest) (*corepb.ListWaitGroupsResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) AddJobsToWaitGroup(ctx context.Context, request *corepb.AddJobsToWaitGroupRequest) (*corepb.AddJobsToWaitGroupResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) CompleteJobsFromWaitGroup(ctx context.Context, request *corepb.CompleteJobsFromWaitGroupRequest) (*corepb.CompleteJobsFromWaitGroupResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) CreateWaitGroup(ctx context.Context, request *corepb.CreateWaitGroupRequest) (*corepb.CreateWaitGroupResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) DeleteWaitGroup(ctx context.Context, request *corepb.DeleteWaitGroupRequest) (*corepb.DeleteWaitGroupResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) RunWaitGroupsGarbageCollection(ctx context.Context, request *corepb.RunWaitGroupsGarbageCollectionRequest, shardId string) (*corepb.RunWaitGroupsGarbageCollectionResponse, error) {
	panic("not implemented")
}

func (a *UnimplementedGrackleCoreApi) WaitGroupsDeleteNamespace(ctx context.Context, request *corepb.WaitGroupsDeleteNamespaceRequest) (*corepb.WaitGroupsDeleteNamespaceResponse, error) {
	panic("not implemented")
}

type GrackleLocksCoreApi interface {
	Snapshot() monstera.ApplicationCoreSnapshot
	Restore(reader io.ReadCloser) error
	Close()
	ListLocks(request *corepb.ListLocksRequest) (*corepb.ListLocksResponse, error)
	AcquireLock(request *corepb.AcquireLockRequest) (*corepb.AcquireLockResponse, error)
	ReleaseLock(request *corepb.ReleaseLockRequest) (*corepb.ReleaseLockResponse, error)
	DeleteLock(request *corepb.DeleteLockRequest) (*corepb.DeleteLockResponse, error)
	GetLock(request *corepb.GetLockRequest) (*corepb.GetLockResponse, error)
	RunLocksGarbageCollection(request *corepb.RunLocksGarbageCollectionRequest) (*corepb.RunLocksGarbageCollectionResponse, error)
	LocksDeleteNamespace(request *corepb.LocksDeleteNamespaceRequest) (*corepb.LocksDeleteNamespaceResponse, error)
}

type GrackleSemaphoresCoreApi interface {
	Snapshot() monstera.ApplicationCoreSnapshot
	Restore(reader io.ReadCloser) error
	Close()
	GetSemaphore(request *corepb.GetSemaphoreRequest) (*corepb.GetSemaphoreResponse, error)
	ListSemaphores(request *corepb.ListSemaphoresRequest) (*corepb.ListSemaphoresResponse, error)
	AcquireSemaphore(request *corepb.AcquireSemaphoreRequest) (*corepb.AcquireSemaphoreResponse, error)
	ReleaseSemaphore(request *corepb.ReleaseSemaphoreRequest) (*corepb.ReleaseSemaphoreResponse, error)
	CreateSemaphore(request *corepb.CreateSemaphoreRequest) (*corepb.CreateSemaphoreResponse, error)
	UpdateSemaphore(request *corepb.UpdateSemaphoreRequest) (*corepb.UpdateSemaphoreResponse, error)
	DeleteSemaphore(request *corepb.DeleteSemaphoreRequest) (*corepb.DeleteSemaphoreResponse, error)
	RunSemaphoresGarbageCollection(request *corepb.RunSemaphoresGarbageCollectionRequest) (*corepb.RunSemaphoresGarbageCollectionResponse, error)
	SemaphoresDeleteNamespace(request *corepb.SemaphoresDeleteNamespaceRequest) (*corepb.SemaphoresDeleteNamespaceResponse, error)
}

type GrackleNamespacesCoreApi interface {
	Snapshot() monstera.ApplicationCoreSnapshot
	Restore(reader io.ReadCloser) error
	Close()
	GetNamespace(request *corepb.GetNamespaceRequest) (*corepb.GetNamespaceResponse, error)
	ListNamespaces(request *corepb.ListNamespacesRequest) (*corepb.ListNamespacesResponse, error)
	CreateNamespace(request *corepb.CreateNamespaceRequest) (*corepb.CreateNamespaceResponse, error)
	UpdateNamespace(request *corepb.UpdateNamespaceRequest) (*corepb.UpdateNamespaceResponse, error)
	DeleteNamespace(request *corepb.DeleteNamespaceRequest) (*corepb.DeleteNamespaceResponse, error)
}

type GrackleWaitGroupsCoreApi interface {
	Snapshot() monstera.ApplicationCoreSnapshot
	Restore(reader io.ReadCloser) error
	Close()
	GetWaitGroup(request *corepb.GetWaitGroupRequest) (*corepb.GetWaitGroupResponse, error)
	ListWaitGroups(request *corepb.ListWaitGroupsRequest) (*corepb.ListWaitGroupsResponse, error)
	AddJobsToWaitGroup(request *corepb.AddJobsToWaitGroupRequest) (*corepb.AddJobsToWaitGroupResponse, error)
	CompleteJobsFromWaitGroup(request *corepb.CompleteJobsFromWaitGroupRequest) (*corepb.CompleteJobsFromWaitGroupResponse, error)
	CreateWaitGroup(request *corepb.CreateWaitGroupRequest) (*corepb.CreateWaitGroupResponse, error)
	DeleteWaitGroup(request *corepb.DeleteWaitGroupRequest) (*corepb.DeleteWaitGroupResponse, error)
	RunWaitGroupsGarbageCollection(request *corepb.RunWaitGroupsGarbageCollectionRequest) (*corepb.RunWaitGroupsGarbageCollectionResponse, error)
	WaitGroupsDeleteNamespace(request *corepb.WaitGroupsDeleteNamespaceRequest) (*corepb.WaitGroupsDeleteNamespaceResponse, error)
}
